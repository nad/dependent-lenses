------------------------------------------------------------------------
-- Identity and composition for traditional non-dependent lenses
------------------------------------------------------------------------

{-# OPTIONS --cubical #-}

import Equality.Path as P

module Lens.Non-dependent.Traditional.Combinators
  {e‚Å∫} (eq : ‚àÄ {a p} ‚Üí P.Equality-with-paths a p e‚Å∫) where

open P.Derived-definitions-and-properties eq

open import Logical-equivalence using (module _‚áî_)
open import Prelude as P hiding (id) renaming (_‚àò_ to _‚äö_)

import Bi-invertibility
open import Bijection equality-with-J as Bijection using (_‚Üî_)
open import Category equality-with-J as C using (Category; Precategory)
open import Circle eq as Circle using (ùïä¬π)
open import Equality.Path.Isomorphisms eq
open import Equivalence equality-with-J as Eq
  using (_‚âÉ_; Is-equivalence)
open import Erased.Cubical eq as E using (Erased; [_])
open import Function-universe equality-with-J as F hiding (id; _‚àò_)
open import H-level equality-with-J as H-level
open import H-level.Closure equality-with-J
open import H-level.Truncation.Propositional eq as T using (‚à•_‚à•)
import Integer equality-with-J as Int
open import Preimage equality-with-J using (_‚Åª¬π_)
open import Surjection equality-with-J as Surjection using (_‚Ü†_)
open import Univalence-axiom equality-with-J

open import Lens.Non-dependent.Traditional eq

private
  variable
    a b h o : Level
    A B C D : Type a
    l‚ÇÅ l‚ÇÇ   : Lens A B

------------------------------------------------------------------------
-- Lens combinators

-- If two types are isomorphic, then there is a lens between them.

‚Üî‚Üílens :
  {A : Type a} {B : Type b} ‚Üí
  A ‚Üî B ‚Üí Lens A B
‚Üî‚Üílens A‚ÜîB = record
  { get     = to
  ; set     = const from
  ; get-set = const right-inverse-of
  ; set-get = left-inverse-of
  ; set-set = Œª _ _ _ ‚Üí refl _
  }
  where
  open _‚Üî_ A‚ÜîB

-- If two types are equivalent, then there is a lens between them.

‚âÉ‚Üílens :
  {A : Type a} {B : Type b} ‚Üí
  A ‚âÉ B ‚Üí Lens A B
‚âÉ‚Üílens = ‚Üî‚Üílens ‚äö _‚âÉ_.bijection

-- Identity lens.

id : Lens A A
id = ‚Üî‚Üílens F.id

-- Composition of lenses.

infixr 9 _‚àò_

_‚àò_ : Lens B C ‚Üí Lens A B ‚Üí Lens A C
l‚ÇÅ ‚àò l‚ÇÇ = record
  { get     = Œª a ‚Üí get l‚ÇÅ (get l‚ÇÇ a)
  ; set     = Œª a c ‚Üí set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c)
  ; get-set = Œª a c ‚Üí
      get l‚ÇÅ (get l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c)))  ‚â°‚ü® cong (get l‚ÇÅ) $ get-set l‚ÇÇ _ _ ‚ü©
      get l‚ÇÅ                   (set l‚ÇÅ (get l‚ÇÇ a) c)    ‚â°‚ü® get-set l‚ÇÅ _ _ ‚ü©‚àé
                                                  c     ‚àé
  ; set-get = Œª a ‚Üí
      set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) (get l‚ÇÅ (get l‚ÇÇ a)))  ‚â°‚ü® cong (set l‚ÇÇ _) $ set-get l‚ÇÅ _ ‚ü©
      set l‚ÇÇ a         (get l‚ÇÇ a)                       ‚â°‚ü® set-get l‚ÇÇ _ ‚ü©‚àé
             a                                          ‚àé
  ; set-set = Œª a c‚ÇÅ c‚ÇÇ ‚Üí
      set l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)) (set l‚ÇÅ (get l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ))) c‚ÇÇ)  ‚â°‚ü® set-set l‚ÇÇ _ _ _ ‚ü©
      set l‚ÇÇ         a                         (set l‚ÇÅ (get l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ))) c‚ÇÇ)  ‚â°‚ü® cong (Œª b ‚Üí set l‚ÇÇ _ (set l‚ÇÅ b _)) $
                                                                                                          get-set l‚ÇÇ _ _ ‚ü©
      set l‚ÇÇ         a                         (set l‚ÇÅ                   (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)   c‚ÇÇ)  ‚â°‚ü® cong (set l‚ÇÇ _) $ set-set l‚ÇÅ _ _ _ ‚ü©‚àé
      set l‚ÇÇ         a                         (set l‚ÇÅ                           (get l‚ÇÇ a)       c‚ÇÇ)  ‚àé
  }
  where
  open Lens

-- Note that composition can be defined in several different ways.
-- Here are two alternative implementations.

infixr 9 _‚àò‚Ä≤_ _‚àò‚Ä≥_

_‚àò‚Ä≤_ : Lens B C ‚Üí Lens A B ‚Üí Lens A C
l‚ÇÅ ‚àò‚Ä≤ l‚ÇÇ = record (l‚ÇÅ ‚àò l‚ÇÇ)
  { set-set = Œª a c‚ÇÅ c‚ÇÇ ‚Üí
      set l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)) (set l‚ÇÅ (get l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ))) c‚ÇÇ)  ‚â°‚ü® cong
                                                                                                            (Œª b ‚Üí set l‚ÇÇ (set l‚ÇÇ _ (set l‚ÇÅ _ _))
                                                                                                                     (set l‚ÇÅ b _)) $
                                                                                                          get-set l‚ÇÇ _ _ ‚ü©
      set l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)) (set l‚ÇÅ                   (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)   c‚ÇÇ)  ‚â°‚ü® set-set l‚ÇÇ _ _ _ ‚ü©
      set l‚ÇÇ         a                         (set l‚ÇÅ                   (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)   c‚ÇÇ)  ‚â°‚ü® cong (set l‚ÇÇ _) $ set-set l‚ÇÅ _ _ _ ‚ü©‚àé
      set l‚ÇÇ         a                         (set l‚ÇÅ                           (get l‚ÇÇ a)       c‚ÇÇ)  ‚àé
  }
  where
  open Lens

_‚àò‚Ä≥_ : Lens B C ‚Üí Lens A B ‚Üí Lens A C
l‚ÇÅ ‚àò‚Ä≥ l‚ÇÇ = record (l‚ÇÅ ‚àò l‚ÇÇ)
  { set-set = Œª a c‚ÇÅ c‚ÇÇ ‚Üí
      set l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)) (set l‚ÇÅ (get l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ))) c‚ÇÇ)  ‚â°‚ü® cong
                                                                                                            (Œª b ‚Üí set l‚ÇÇ (set l‚ÇÇ _ (set l‚ÇÅ _ _))
                                                                                                                     (set l‚ÇÅ b _)) $
                                                                                                          get-set l‚ÇÇ _ _ ‚ü©
      set l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)) (set l‚ÇÅ                   (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)   c‚ÇÇ)  ‚â°‚ü® cong (set l‚ÇÇ _) $ set-set l‚ÇÅ _ _ _ ‚ü©
      set l‚ÇÇ (set l‚ÇÇ a (set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ)) (set l‚ÇÅ                           (get l‚ÇÇ a)       c‚ÇÇ)  ‚â°‚ü® set-set l‚ÇÇ _ _ _ ‚ü©‚àé
      set l‚ÇÇ         a                         (set l‚ÇÅ                           (get l‚ÇÇ a)       c‚ÇÇ)  ‚àé
  }
  where
  open Lens

-- These two implementations are pointwise equal to the other one.
-- However, I don't know if there is some other definition that is
-- distinct from these two (if we require that the definitions are
-- polymorphic, that get and set are implemented in the same way as
-- for _‚àò_, and that the three composition laws below hold).

‚àò‚â°‚àò‚Ä≤ : l‚ÇÅ ‚àò l‚ÇÇ ‚â° l‚ÇÅ ‚àò‚Ä≤ l‚ÇÇ
‚àò‚â°‚àò‚Ä≤ {l‚ÇÅ = l‚ÇÅ} {l‚ÇÇ = l‚ÇÇ} = equal-laws‚Üí‚â°
  (Œª _ _ ‚Üí refl _)
  (Œª _ ‚Üí refl _)
  (Œª a c‚ÇÅ c‚ÇÇ ‚Üí
     let b‚ÇÅ = set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ
         b‚ÇÇ = set l‚ÇÅ b‚ÇÅ c‚ÇÇ
         a‚Ä≤ = set l‚ÇÇ a b‚ÇÅ
         b‚Ä≤ = set l‚ÇÅ (get l‚ÇÇ a‚Ä≤) c‚ÇÇ
     in
     set-set (l‚ÇÅ ‚àò l‚ÇÇ) a c‚ÇÅ c‚ÇÇ                                          ‚â°‚ü®‚ü©

     trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤)
       (trans (cong (Œª b ‚Üí set l‚ÇÇ a (set l‚ÇÅ b c‚ÇÇ)) (get-set l‚ÇÇ a b‚ÇÅ))
          (cong (set l‚ÇÇ a) (set-set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ c‚ÇÇ)))              ‚â°‚ü® sym $ trans-assoc _ _ _ ‚ü©

     trans (trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤)
              (cong (Œª b ‚Üí set l‚ÇÇ a (set l‚ÇÅ b c‚ÇÇ)) (get-set l‚ÇÇ a b‚ÇÅ)))
       (cong (set l‚ÇÇ a) (set-set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ c‚ÇÇ))                  ‚â°‚ü® cong (flip trans _) $
                                                                           elim‚ÇÅ
                                                                             (Œª eq ‚Üí
                                                                                trans (set-set l‚ÇÇ _ b‚ÇÅ _)
                                                                                  (cong (Œª b ‚Üí set l‚ÇÇ _ (set l‚ÇÅ b _)) eq) ‚â°
                                                                                trans (cong (Œª b ‚Üí set l‚ÇÇ _ (set l‚ÇÅ b _)) eq)
                                                                                  (set-set l‚ÇÇ _ _ _))
                                                                             (
         trans (set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ)
           (cong (Œª b ‚Üí set l‚ÇÇ a (set l‚ÇÅ b c‚ÇÇ)) (refl _))                     ‚â°‚ü® trans (cong (trans _) $ cong-refl _) $
                                                                                 trans-refl ≥ _ ‚ü©

         set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ                                                   ‚â°‚ü® sym $
                                                                                 trans (cong (flip trans _) $ cong-refl _) $
                                                                                 trans-reflÀ° _ ‚ü©‚àé
         trans (cong (Œª b ‚Üí set l‚ÇÇ a‚Ä≤ (set l‚ÇÅ b c‚ÇÇ)) (refl _))
           (set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ)                                               ‚àé)
                                                                             (get-set l‚ÇÇ a b‚ÇÅ) ‚ü©
     trans (trans (cong (Œª b ‚Üí set l‚ÇÇ a‚Ä≤ (set l‚ÇÅ b c‚ÇÇ))
                     (get-set l‚ÇÇ a b‚ÇÅ))
              (set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ))
       (cong (set l‚ÇÇ a) (set-set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ c‚ÇÇ))                  ‚â°‚ü® trans-assoc _ _ _ ‚ü©

     trans (cong (Œª b ‚Üí set l‚ÇÇ a‚Ä≤ (set l‚ÇÅ b c‚ÇÇ)) (get-set l‚ÇÇ a b‚ÇÅ))
       (trans (set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ)
          (cong (set l‚ÇÇ a) (set-set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ c‚ÇÇ)))              ‚â°‚ü®‚ü©

     set-set (l‚ÇÅ ‚àò‚Ä≤ l‚ÇÇ) a c‚ÇÅ c‚ÇÇ                                         ‚àé)
  where
  open Lens

‚àò‚â°‚àò‚Ä≥ : l‚ÇÅ ‚àò l‚ÇÇ ‚â° l‚ÇÅ ‚àò‚Ä≥ l‚ÇÇ
‚àò‚â°‚àò‚Ä≥ {l‚ÇÅ = l‚ÇÅ} {l‚ÇÇ = l‚ÇÇ} = equal-laws‚Üí‚â°
  (Œª _ _ ‚Üí refl _)
  (Œª _ ‚Üí refl _)
  (Œª a c‚ÇÅ c‚ÇÇ ‚Üí
     let b‚ÇÅ = set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ
         b‚ÇÇ = set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÇ
         a‚Ä≤ = set l‚ÇÇ a b‚ÇÅ
         b‚Ä≤ = set l‚ÇÅ (get l‚ÇÇ a‚Ä≤) c‚ÇÇ

         eq : b‚Ä≤ ‚â° b‚ÇÇ
         eq = trans (cong (Œª b ‚Üí set l‚ÇÅ b c‚ÇÇ) (get-set l‚ÇÇ a b‚ÇÅ))
                (set-set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ c‚ÇÇ)
     in
     set-set (l‚ÇÅ ‚àò l‚ÇÇ) a c‚ÇÅ c‚ÇÇ                                         ‚â°‚ü®‚ü©

     trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤)
       (trans (cong (Œª b ‚Üí set l‚ÇÇ a (set l‚ÇÅ b c‚ÇÇ)) (get-set l‚ÇÇ a b‚ÇÅ))
          (cong (set l‚ÇÇ a) (set-set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ c‚ÇÇ)))             ‚â°‚ü® cong (trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤)) $
                                                                          trans (cong (flip trans _) $ sym $ cong-‚àò _ _ _) $
                                                                          sym $ cong-trans _ _ _ ‚ü©

     trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤) (cong (set l‚ÇÇ a) eq)                   ‚â°‚ü® elim¬π
                                                                            (Œª {b‚ÇÇ} eq ‚Üí trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤) (cong (set l‚ÇÇ a) eq) ‚â°
                                                                                         trans (cong (set l‚ÇÇ a‚Ä≤) eq) (set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ))
                                                                            (
         trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤) (cong (set l‚ÇÇ a) (refl _))               ‚â°‚ü® cong (trans _) $ cong-refl _ ‚ü©
         trans (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤) (refl _)                                 ‚â°‚ü® trans-refl ≥ _ ‚ü©
         set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤                                                  ‚â°‚ü® sym $ trans-reflÀ° _ ‚ü©
         trans (refl _) (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤)                                 ‚â°‚ü® cong (flip trans _) $ sym $ cong-refl _ ‚ü©‚àé
         trans (cong (set l‚ÇÇ a‚Ä≤) (refl _)) (set-set l‚ÇÇ a b‚ÇÅ b‚Ä≤)              ‚àé)
                                                                            eq ‚ü©

     trans (cong (set l‚ÇÇ a‚Ä≤) eq) (set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ)                  ‚â°‚ü® trans (cong (flip trans _) $
                                                                                 trans (cong-trans _ _ _) $
                                                                                 cong (flip trans _) $ cong-‚àò _ _ _) $
                                                                          trans-assoc _ _ _ ‚ü©
     trans (cong (Œª b ‚Üí set l‚ÇÇ a‚Ä≤ (set l‚ÇÅ b c‚ÇÇ)) (get-set l‚ÇÇ a b‚ÇÅ))
       (trans (cong (set l‚ÇÇ a‚Ä≤) (set-set l‚ÇÅ (get l‚ÇÇ a) c‚ÇÅ c‚ÇÇ))
          (set-set l‚ÇÇ a b‚ÇÅ b‚ÇÇ))                                        ‚â°‚ü®‚ü©

     set-set (l‚ÇÅ ‚àò‚Ä≥ l‚ÇÇ) a c‚ÇÅ c‚ÇÇ                                        ‚àé)
  where
  open Lens

-- id is a left identity of _‚àò_.

left-identity : (l : Lens A B) ‚Üí id ‚àò l ‚â° l
left-identity l = equal-laws‚Üí‚â°
  (Œª a b ‚Üí
     trans (cong P.id (get-set a b)) (refl _)  ‚â°‚ü® trans-refl ≥ _ ‚ü©
     cong P.id (get-set a b)                   ‚â°‚ü® sym $ cong-id _ ‚ü©‚àé
     get-set a b                               ‚àé)
  (Œª a ‚Üí
     trans (cong (set a) (refl _)) (set-get a)  ‚â°‚ü® cong (flip trans _) $ cong-refl _ ‚ü©
     trans (refl _) (set-get a)                 ‚â°‚ü® trans-reflÀ° _ ‚ü©‚àé
     set-get a                                  ‚àé)
  (Œª a b‚ÇÅ b‚ÇÇ ‚Üí
     trans (set-set a b‚ÇÅ b‚ÇÇ)
       (trans (cong (Œª _ ‚Üí set a b‚ÇÇ) (get-set a b‚ÇÅ))
          (cong (set a) (refl _)))                      ‚â°‚ü® cong‚ÇÇ (Œª p q ‚Üí trans _ (trans p q))
                                                             (cong-const _)
                                                             (cong-refl _) ‚ü©

     trans (set-set a b‚ÇÅ b‚ÇÇ) (trans (refl _) (refl _))  ‚â°‚ü® trans (cong (trans _) trans-refl-refl) $
                                                           trans-refl ≥ _ ‚ü©‚àé
     set-set a b‚ÇÅ b‚ÇÇ                                    ‚àé)
  where
  open Lens l

-- id is a right identity of _‚àò_.

right-identity : (l : Lens A B) ‚Üí l ‚àò id ‚â° l
right-identity l = equal-laws‚Üí‚â°
  (Œª a b ‚Üí
     trans (cong get (refl _)) (get-set a b)  ‚â°‚ü® cong (flip trans _) $ cong-refl _ ‚ü©
     trans (refl _) (get-set a b)             ‚â°‚ü® trans-reflÀ° _ ‚ü©‚àé
     get-set a b                              ‚àé)
  (Œª a ‚Üí
     trans (cong P.id (set-get a)) (refl _)  ‚â°‚ü® trans-refl ≥ _ ‚ü©
     cong P.id (set-get a)                   ‚â°‚ü® sym $ cong-id _ ‚ü©‚àé
     set-get a                               ‚àé)
  (Œª a b‚ÇÅ b‚ÇÇ ‚Üí
     trans (refl _)
       (trans (cong (Œª b ‚Üí set b b‚ÇÇ) (refl _))
          (cong P.id (set-set a b‚ÇÅ b‚ÇÇ)))        ‚â°‚ü® trans-reflÀ° _ ‚ü©

     trans (cong (Œª b ‚Üí set b b‚ÇÇ) (refl _))
       (cong P.id (set-set a b‚ÇÅ b‚ÇÇ))            ‚â°‚ü® cong‚ÇÇ trans (cong-refl _) (sym $ cong-id _) ‚ü©

     trans (refl _) (set-set a b‚ÇÅ b‚ÇÇ)           ‚â°‚ü® trans-reflÀ° _ ‚ü©‚àé

     set-set a b‚ÇÅ b‚ÇÇ                            ‚àé)
  where
  open Lens l

-- _‚àò_ is associative.

associativity :
  (l‚ÇÅ : Lens C D) (l‚ÇÇ : Lens B C) (l‚ÇÉ : Lens A B) ‚Üí
  l‚ÇÅ ‚àò (l‚ÇÇ ‚àò l‚ÇÉ) ‚â° (l‚ÇÅ ‚àò l‚ÇÇ) ‚àò l‚ÇÉ
associativity l‚ÇÅ l‚ÇÇ l‚ÇÉ = equal-laws‚Üí‚â° lemma‚ÇÅ lemma‚ÇÇ lemma‚ÇÉ
  where
  open Lens

  lemma‚ÇÅ = Œª a d ‚Üí
    let
      f  = get l‚ÇÅ
      g  = get l‚ÇÇ
      b  = get l‚ÇÉ a
      c  = g b
      c‚Ä≤ = set l‚ÇÅ c d
      x  = get-set l‚ÇÉ a (set l‚ÇÇ b c‚Ä≤)
      y  = get-set l‚ÇÇ b c‚Ä≤
      z  = get-set l‚ÇÅ c d
    in
    trans (cong f $ trans (cong g x) y) z           ‚â°‚ü® cong (Œª x ‚Üí trans x z) (cong-trans f _ y) ‚ü©
    trans (trans (cong f $ cong g x) (cong f y)) z  ‚â°‚ü® trans-assoc _ _ z ‚ü©
    trans (cong f $ cong g x) (trans (cong f y) z)  ‚â°‚ü® cong (Œª x ‚Üí trans x (trans (cong f y) z)) (cong-‚àò f g x) ‚ü©‚àé
    trans (cong (f ‚äö g) x) (trans (cong f y) z)     ‚àé

  lemma‚ÇÇ = Œª a ‚Üí
    let
      b = get l‚ÇÉ a
      f = set l‚ÇÉ a
      g = set l‚ÇÇ b
      x = set-get l‚ÇÅ (get l‚ÇÇ b)
      y = set-get l‚ÇÇ b
      z = set-get l‚ÇÉ a
    in
    trans (cong (f ‚äö g) x) (trans (cong f y) z)     ‚â°‚ü® sym $ trans-assoc _ _ z ‚ü©
    trans (trans (cong (f ‚äö g) x) (cong f y)) z     ‚â°‚ü® cong (Œª x ‚Üí trans (trans x (cong f y)) z) (sym $ cong-‚àò f g x) ‚ü©
    trans (trans (cong f (cong g x)) (cong f y)) z  ‚â°‚ü® cong (Œª x ‚Üí trans x z) (sym $ cong-trans f _ y) ‚ü©‚àé
    trans (cong f $ trans (cong g x) y) z           ‚àé

  lemma‚ÇÉ = Œª a d‚ÇÅ d‚ÇÇ ‚Üí
    let
      f   = set l‚ÇÉ a
      g   = set l‚ÇÇ (get l‚ÇÉ a)
      h   = Œª x ‚Üí set l‚ÇÅ x d‚ÇÇ
      i   = get l‚ÇÇ

      c‚ÇÅ  = set l‚ÇÅ (get (l‚ÇÇ ‚àò l‚ÇÉ) a) d‚ÇÅ
      c‚ÇÇ  = h (i (get l‚ÇÉ a))
      c‚ÇÇ‚Ä≤ = h (i (get l‚ÇÉ (set (l‚ÇÇ ‚àò l‚ÇÉ) a c‚ÇÅ)))
      c‚ÇÇ‚Ä≥ = h (i (set l‚ÇÇ (get l‚ÇÉ a) c‚ÇÅ))

      b‚ÇÅ  = g c‚ÇÅ
      b‚ÇÅ‚Ä≤ = get l‚ÇÉ (f b‚ÇÅ)

      x   = set-set l‚ÇÉ a b‚ÇÅ (set l‚ÇÇ b‚ÇÅ‚Ä≤ c‚ÇÇ‚Ä≤)
      y   = get-set l‚ÇÉ a b‚ÇÅ
      z   = set-set l‚ÇÇ (get l‚ÇÉ a) c‚ÇÅ
      u   = get-set l‚ÇÇ (get l‚ÇÉ a) c‚ÇÅ
      v   = set-set l‚ÇÅ (get (l‚ÇÇ ‚àò l‚ÇÉ) a) d‚ÇÅ d‚ÇÇ

      c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥ =
        c‚ÇÇ‚Ä≤  ‚â°‚ü® cong (h ‚äö i) y ‚ü©‚àé
        c‚ÇÇ‚Ä≥  ‚àé

      lemma‚ÇÅ‚ÇÄ =
        trans (sym (cong (h ‚äö i) y)) (cong h (cong i y))  ‚â°‚ü® cong (trans _) (cong-‚àò h i y) ‚ü©
        trans (sym (cong (h ‚äö i) y)) (cong (h ‚äö i) y)     ‚â°‚ü® trans-symÀ° (cong (h ‚äö i) y) ‚ü©‚àé
        refl _                                            ‚àé

      lemma‚Çâ =
        trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (cong (set l‚ÇÇ b‚ÇÅ) c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)  ‚â°‚ü® cong (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y))
                                                                                (cong-‚àò (set l‚ÇÇ b‚ÇÅ) (h ‚äö i) y) ‚ü©
        trans (cong (Œª x ‚Üí set l‚ÇÇ x  (h (i b‚ÇÅ‚Ä≤))) y)
              (cong (Œª x ‚Üí set l‚ÇÇ b‚ÇÅ (h (i x  ))) y)                    ‚â°‚ü® trans-cong-cong (Œª x y ‚Üí set l‚ÇÇ x (h (i y))) y ‚ü©‚àé

        cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y                               ‚àé

      lemma‚Çà =
        sym (cong (set l‚ÇÇ b‚ÇÅ) (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥))  ‚â°‚ü® sym $ cong-sym (set l‚ÇÇ b‚ÇÅ) (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥) ‚ü©
        cong (set l‚ÇÇ b‚ÇÅ) (sym (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥))  ‚â°‚ü® cong (cong (set l‚ÇÇ b‚ÇÅ)) (sym-sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥) ‚ü©‚àé
        cong (set l‚ÇÇ b‚ÇÅ) c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥              ‚àé

      lemma‚Çá =
        trans (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)) (cong g (cong h (cong i y)))  ‚â°‚ü® sym $ cong-trans g _ (cong h (cong i y)) ‚ü©
        cong g (trans (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥) (cong h (cong i y)))           ‚â°‚ü® cong (cong g) lemma‚ÇÅ‚ÇÄ ‚ü©
        cong g (refl _)                                            ‚â°‚ü® cong-refl _ ‚ü©‚àé
        refl _                                                     ‚àé

      lemma‚ÇÜ =
        trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y)
              (trans (cong (set l‚ÇÇ b‚ÇÅ) c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)
                     (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥))))       ‚â°‚ü® sym $ trans-assoc _ _ (trans _ (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥))) ‚ü©

        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y)
                     (cong (set l‚ÇÇ b‚ÇÅ) c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥))
              (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))               ‚â°‚ü® cong (Œª e ‚Üí trans e (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))) lemma‚Çâ ‚ü©

        trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y)
              (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))               ‚â°‚ü® sym $ trans-assoc _ _ (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)) ‚ü©‚àé

        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y) (z c‚ÇÇ‚Ä≥))
              (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥))                               ‚àé

      lemma‚ÇÖ =
        z c‚ÇÇ‚Ä≤                                                  ‚â°‚ü® sym $ dcong z (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥) ‚ü©

        subst (Œª x ‚Üí set l‚ÇÇ b‚ÇÅ x ‚â° g x) (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥) (z c‚ÇÇ‚Ä≥)  ‚â°‚ü® subst-in-terms-of-trans-and-cong {f = set l‚ÇÇ b‚ÇÅ} {g = g} {x‚â°y = sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥} ‚ü©

        trans (sym (cong (set l‚ÇÇ b‚ÇÅ) (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))
              (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))           ‚â°‚ü® cong (Œª e ‚Üí trans e (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))) lemma‚Çà ‚ü©‚àé

        trans (cong (set l‚ÇÇ b‚ÇÅ) c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)
              (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))           ‚àé

      lemma‚ÇÑ =
        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤))
              (cong g (cong h (cong i y)))                            ‚â°‚ü® cong (Œª e ‚Üí trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) e)
                                                                                                  (cong g (cong h (cong i y))))
                                                                              lemma‚ÇÖ ‚ü©
        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y)
                     (trans (cong (set l‚ÇÇ b‚ÇÅ) c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)
                            (trans (z c‚ÇÇ‚Ä≥) (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))))
              (cong g (cong h (cong i y)))                            ‚â°‚ü® cong (Œª e ‚Üí trans e (cong g (cong h (cong i y)))) lemma‚ÇÜ ‚ü©

        trans (trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y)
                            (z c‚ÇÇ‚Ä≥))
                     (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥)))
              (cong g (cong h (cong i y)))                            ‚â°‚ü® trans-assoc _ _ (cong g (cong h (cong i y))) ‚ü©

        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y) (z c‚ÇÇ‚Ä≥))
              (trans (cong g (sym c‚ÇÇ‚Ä≤‚â°c‚ÇÇ‚Ä≥))
                     (cong g (cong h (cong i y))))                    ‚â°‚ü® cong (trans (trans _ (z c‚ÇÇ‚Ä≥))) lemma‚Çá ‚ü©

        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y) (z c‚ÇÇ‚Ä≥))
              (refl _)                                                ‚â°‚ü® trans-refl ≥ _ ‚ü©‚àé

        trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y) (z c‚ÇÇ‚Ä≥)             ‚àé

      lemma‚ÇÉ =
        cong g (trans (cong h (trans (cong i y) u)) v)           ‚â°‚ü® cong (Œª e ‚Üí cong g (trans e v)) (cong-trans h _ u) ‚ü©

        cong g (trans (trans (cong h (cong i y)) (cong h u)) v)  ‚â°‚ü® cong (cong g) (trans-assoc _ _ v) ‚ü©

        cong g (trans (cong h (cong i y)) (trans (cong h u) v))  ‚â°‚ü® cong-trans g _ (trans _ v) ‚ü©‚àé

        trans (cong g (cong h (cong i y)))
              (cong g (trans (cong h u) v))                      ‚àé

      lemma‚ÇÇ =
        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤))
              (cong g (trans (cong h (trans (cong i y) u)) v))      ‚â°‚ü® cong (trans (trans _ (z c‚ÇÇ‚Ä≤))) lemma‚ÇÉ ‚ü©

        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤))
              (trans (cong g (cong h (cong i y)))
                     (cong g (trans (cong h u) v)))                 ‚â°‚ü® sym $ trans-assoc _ _ (cong g (trans _ v)) ‚ü©

        trans (trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤))
                     (cong g (cong h (cong i y))))
              (cong g (trans (cong h u) v))                         ‚â°‚ü® cong (Œª e ‚Üí trans e (cong g (trans (cong h u) v))) lemma‚ÇÑ ‚ü©

        trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y) (z c‚ÇÇ‚Ä≥))
              (cong g (trans (cong h u) v))                         ‚â°‚ü® trans-assoc _ _ (cong g (trans _ v)) ‚ü©‚àé

        trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y)
              (trans (z c‚ÇÇ‚Ä≥) (cong g (trans (cong h u) v)))         ‚àé

      lemma‚ÇÅ =
        trans (cong f (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤)))
              (cong (f ‚äö g) (trans (cong h (trans (cong i y) u)) v))    ‚â°‚ü® cong (Œª e ‚Üí trans
                                                                                         (cong f (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤))) e)
                                                                                (sym $ cong-‚àò f g (trans _ v)) ‚ü©
        trans (cong f (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤)))
              (cong f (cong g (trans (cong h (trans (cong i y) u))
                                     v)))                               ‚â°‚ü® sym $ cong-trans f (trans _ (z c‚ÇÇ‚Ä≤)) (cong g (trans _ v)) ‚ü©

        cong f (trans (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y) (z c‚ÇÇ‚Ä≤))
                      (cong g (trans (cong h (trans (cong i y) u))
                                     v)))                               ‚â°‚ü® cong (cong f) lemma‚ÇÇ ‚ü©

        cong f (trans (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y)
                      (trans (z c‚ÇÇ‚Ä≥) (cong g (trans (cong h u) v))))    ‚â°‚ü® cong-trans _ _ _ ‚ü©

        trans (cong f (cong (Œª x ‚Üí set l‚ÇÇ x (h (i x))) y))
          (cong f (trans (z c‚ÇÇ‚Ä≥) (cong g (trans (cong h u) v))))        ‚â°‚ü® cong‚ÇÇ (Œª p q ‚Üí trans p (cong f (trans (z c‚ÇÇ‚Ä≥) q)))
                                                                             (cong-‚àò _ _ _)
                                                                             (trans (cong-trans _ _ _) $
                                                                              cong (flip trans _) $
                                                                              cong-‚àò _ _ _) ‚ü©‚àé
        trans (cong (Œª x ‚Üí f (set l‚ÇÇ x (h (i x)))) y)
          (cong f (trans (z c‚ÇÇ‚Ä≥) (trans (cong (g ‚äö h) u) (cong g v))))  ‚àé

    in
    trans (trans x (trans (cong (Œª x ‚Üí f (set l‚ÇÇ x c‚ÇÇ‚Ä≤)) y)
                      (cong f (z c‚ÇÇ‚Ä≤))))
      (trans (cong (f ‚äö g ‚äö h) (trans (cong i y) u))
         (cong (f ‚äö g) v))                                          ‚â°‚ü® cong‚ÇÇ (Œª p q ‚Üí trans (trans x p) q)
                                                                         (trans (cong (flip trans _) $ sym $ cong-‚àò _ _ _) $
                                                                          sym $ cong-trans _ _ _)
                                                                         (trans (cong (flip trans _) $ sym $ cong-‚àò _ _ _) $
                                                                          sym $ cong-trans _ _ _) ‚ü©
    trans (trans x (cong f (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y)
                                  (z c‚ÇÇ‚Ä≤))))
          (cong (f ‚äö g) (trans (cong h (trans (cong i y) u)) v))    ‚â°‚ü® trans-assoc _ _ _ ‚ü©

    trans x (trans (cong f (trans (cong (Œª x ‚Üí set l‚ÇÇ x c‚ÇÇ‚Ä≤) y)
                                  (z c‚ÇÇ‚Ä≤)))
                   (cong (f ‚äö g)
                         (trans (cong h (trans (cong i y) u)) v)))  ‚â°‚ü® cong (trans x) lemma‚ÇÅ ‚ü©‚àé

    trans x (trans (cong (Œª x ‚Üí f (set l‚ÇÇ x (h (i x)))) y)
               (cong f (trans (z c‚ÇÇ‚Ä≥) (trans (cong (g ‚äö h) u)
                                         (cong g v)))))             ‚àé

-- Every lens of type Lens¬†A¬†A that satisfies a certain right
-- identity law is equal to the identity lens.

id-unique :
  (id‚Ä≤ : Lens A A) ‚Üí
  ((l : Lens A A) ‚Üí l ‚àò id‚Ä≤ ‚â° l) ‚Üí
  id‚Ä≤ ‚â° id
id-unique id‚Ä≤ right-identity =
  id‚Ä≤       ‚â°‚ü® sym $ left-identity _ ‚ü©
  id ‚àò id‚Ä≤  ‚â°‚ü® right-identity _ ‚ü©‚àé
  id        ‚àé

-- An equality characterisation lemma that can be used when one of
-- the lenses is the identity.

equality-characterisation-id :
  {l : Lens A A} ‚Üí let open Lens l in

  l ‚â° id
    ‚Üî
  ‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
  ‚àÉ Œª (s : ‚àÄ a b ‚Üí set a b ‚â° b) ‚Üí
    (‚àÄ a b ‚Üí get-set a b ‚â° trans (cong get (s a b)) (g b)) √ó
    (‚àÄ a ‚Üí set-get a ‚â° trans (s a (get a)) (g a)) √ó
    (‚àÄ a b‚ÇÅ b‚ÇÇ ‚Üí
       trans (set-set a b‚ÇÅ b‚ÇÇ) (s a b‚ÇÇ) ‚â°
       cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s)))
equality-characterisation-id {l = l} =
  l ‚â° id                                                              ‚Üù‚ü® equality-characterisation‚ÇÑ ‚ü©

  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : ‚àÄ a b ‚Üí set a b ‚â° b) ‚Üí
     (‚àÄ a b ‚Üí
        trans (sym (trans (cong get (s a b)) (g b))) (get-set a b) ‚â°
        refl _) √ó
     (‚àÄ a ‚Üí
        trans (sym (trans (s a (get a)) (cong P.id (g a))))
          (set-get a) ‚â°
        refl _) √ó
     (‚àÄ a b‚ÇÅ b‚ÇÇ ‚Üí
        trans (set-set a b‚ÇÅ b‚ÇÇ) (s a b‚ÇÇ) ‚â°
        trans (cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s)))
          (refl _)))                                                  ‚Üù‚ü® (‚àÉ-cong Œª g ‚Üí ‚àÉ-cong Œª _ ‚Üí ‚àÉ-cong Œª _ ‚Üí
                                                                          (‚àÄ-cong ext Œª _ ‚Üí
                                                                           ‚â°‚áí‚Üù _ $ cong (Œª eq ‚Üí trans (sym (trans _ eq)) (set-get _) ‚â° _) $ sym $
                                                                           cong-id (g _))
                                                                           √ó-cong
                                                                          ‚àÄ-cong ext Œª _ ‚Üí ‚àÄ-cong ext Œª _ ‚Üí ‚àÄ-cong ext Œª _ ‚Üí
                                                                           ‚â°‚áí‚Üù _ $ cong (_ ‚â°_) $ trans-refl ≥ _) ‚ü©
  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : ‚àÄ a b ‚Üí set a b ‚â° b) ‚Üí
     (‚àÄ a b ‚Üí
        trans (sym (trans (cong get (s a b)) (g b))) (get-set a b) ‚â°
        refl _) √ó
     (‚àÄ a ‚Üí
        trans (sym (trans (s a (get a)) (g a))) (set-get a) ‚â°
        refl _) √ó
     (‚àÄ a b‚ÇÅ b‚ÇÇ ‚Üí
        trans (set-set a b‚ÇÅ b‚ÇÇ) (s a b‚ÇÇ) ‚â°
        cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s))))        ‚Üù‚ü® (‚àÉ-cong Œª g ‚Üí ‚àÉ-cong Œª s ‚Üí
                                                                          (‚àÄ-cong ext Œª _ ‚Üí ‚àÄ-cong ext Œª _ ‚Üí
                                                                           ‚â°-comm F.‚àò ‚â°‚áí‚Üù _ (cong (_‚â° _) $ trans-refl ≥ _) F.‚àò
                                                                           ‚â°‚áí‚Üù _ (sym $ [trans‚â°]‚â°[‚â°trans-symÀ°] _ _ _) F.‚àò ‚â°-comm)
                                                                            √ó-cong
                                                                          (‚àÄ-cong ext Œª _ ‚Üí
                                                                           ‚â°-comm F.‚àò ‚â°‚áí‚Üù _ (cong (_‚â° _) $ trans-refl ≥ _) F.‚àò
                                                                           ‚â°‚áí‚Üù _ (sym $ [trans‚â°]‚â°[‚â°trans-symÀ°] _ _ _) F.‚àò ‚â°-comm)
                                                                            √ó-cong
                                                                          F.id) ‚ü©‚ñ°
  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : ‚àÄ a b ‚Üí set a b ‚â° b) ‚Üí
     (‚àÄ a b ‚Üí get-set a b ‚â° trans (cong get (s a b)) (g b)) √ó
     (‚àÄ a ‚Üí set-get a ‚â° trans (s a (get a)) (g a)) √ó
     (‚àÄ a b‚ÇÅ b‚ÇÇ ‚Üí
        trans (set-set a b‚ÇÅ b‚ÇÇ) (s a b‚ÇÇ) ‚â°
        cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s))))        ‚ñ°
  where
  open Lens l

-- A lemma that can be used to show that a lens with a constant
-- setter (such as the ones produced by getter-equivalence‚Üílens
-- below) is equal to the identity lens.

constant-setter‚Üí‚â°id :
  {l‚Ä≤ : ‚àÉ Œª (get : A ‚Üí A) ‚Üí
        ‚àÉ Œª (set : A ‚Üí A) ‚Üí
          (A ‚Üí ‚àÄ a ‚Üí get (set a) ‚â° a) √ó
          (‚àÄ a ‚Üí set (get a) ‚â° a) √ó
          (A ‚Üí A ‚Üí ‚àÄ a ‚Üí set a ‚â° set a)} ‚Üí

  let l   = _‚Üî_.from Lens-as-Œ£ (Œ£-map P.id (Œ£-map const P.id) l‚Ä≤)
      set = proj‚ÇÅ (proj‚ÇÇ l‚Ä≤)
      open Lens l hiding (set)
  in

  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : ‚àÄ a ‚Üí set a ‚â° a) ‚Üí
     (‚àÄ a‚ÇÅ a‚ÇÇ ‚Üí get-set a‚ÇÅ a‚ÇÇ ‚â° trans (cong get (s a‚ÇÇ)) (g a‚ÇÇ)) √ó
     (‚àÄ a ‚Üí set-get a ‚â° trans (s (get a)) (g a)) √ó
     (‚àÄ a a‚ÇÅ a‚ÇÇ ‚Üí set-set a a‚ÇÅ a‚ÇÇ ‚â° refl _)) ‚Üí
  l ‚â° id
constant-setter‚Üí‚â°id {A = A} {l‚Ä≤ = l‚Ä≤} =
  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : ‚àÄ a ‚Üí set a ‚â° a) ‚Üí
     (‚àÄ a‚ÇÅ a‚ÇÇ ‚Üí get-set a‚ÇÅ a‚ÇÇ ‚â° trans (cong get (s a‚ÇÇ)) (g a‚ÇÇ)) √ó
     (‚àÄ a ‚Üí set-get a ‚â° trans (s (get a)) (g a)) √ó
     (‚àÄ a a‚ÇÅ a‚ÇÇ ‚Üí set-set a a‚ÇÅ a‚ÇÇ ‚â° refl _))                          ‚Üù‚ü® (Œ£-map P.id $ Œ£-map P.id Œª {s} ‚Üí Œ£-map P.id $ Œ£-map P.id Œª hyp a a‚ÇÅ a‚ÇÇ ‚Üí

      trans (set-set a a‚ÇÅ a‚ÇÇ) (s a‚ÇÇ)                                        ‚â°‚ü® cong (Œª eq ‚Üí trans eq (s a‚ÇÇ)) $ hyp _ _ _ ‚ü©
      trans (refl _) (s a‚ÇÇ)                                                 ‚â°‚ü® trans-reflÀ° (s _) ‚ü©‚àé
      s a‚ÇÇ                                                                  ‚àé) ‚ü©

  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : ‚àÄ a ‚Üí set a ‚â° a) ‚Üí
     (‚àÄ a‚ÇÅ a‚ÇÇ ‚Üí get-set a‚ÇÅ a‚ÇÇ ‚â° trans (cong get (s a‚ÇÇ)) (g a‚ÇÇ)) √ó
     (‚àÄ a ‚Üí set-get a ‚â° trans (s (get a)) (g a)) √ó
     (‚àÄ a a‚ÇÅ a‚ÇÇ ‚Üí trans (set-set a a‚ÇÅ a‚ÇÇ) (s a‚ÇÇ) ‚â° s a‚ÇÇ))             ‚Üî‚ü® (‚àÉ-cong Œª _ ‚Üí ‚àÉ-cong Œª s ‚Üí ‚àÉ-cong Œª _ ‚Üí ‚àÉ-cong Œª _ ‚Üí
                                                                          ‚àÄ-cong ext Œª a ‚Üí ‚àÄ-cong ext Œª a‚ÇÅ ‚Üí ‚àÄ-cong ext Œª a‚ÇÇ ‚Üí
                                                                          ‚â°‚áí‚Üù equivalence $ cong (trans _ (s _) ‚â°_) (
      s a‚ÇÇ                                                                  ‚â°‚ü® sym $ cong-ext s ‚ü©
      cong (Œª set ‚Üí set a‚ÇÇ) (‚ü®ext‚ü© s)                                       ‚â°‚ü® sym $ cong-‚àò _ _ (‚ü®ext‚ü© s) ‚ü©
      cong (Œª set ‚Üí set (set a a‚ÇÅ) a‚ÇÇ) (cong const (‚ü®ext‚ü© s))               ‚â°‚ü® cong (cong (Œª set ‚Üí set (set a a‚ÇÅ) a‚ÇÇ)) $ sym $
                                                                               ext-const (‚ü®ext‚ü© s) ‚ü©‚àé
      cong (Œª set ‚Üí set (set a a‚ÇÅ) a‚ÇÇ) (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© s)                ‚àé)) ‚ü©

  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : ‚àÄ a ‚Üí set a ‚â° a) ‚Üí
     (‚àÄ a‚ÇÅ a‚ÇÇ ‚Üí get-set a‚ÇÅ a‚ÇÇ ‚â° trans (cong get (s a‚ÇÇ)) (g a‚ÇÇ)) √ó
     (‚àÄ a ‚Üí set-get a ‚â° trans (s (get a)) (g a)) √ó
     (‚àÄ a a‚ÇÅ a‚ÇÇ ‚Üí
        trans (set-set a a‚ÇÅ a‚ÇÇ) (s a‚ÇÇ) ‚â°
        cong (Œª set ‚Üí set (set a a‚ÇÅ) a‚ÇÇ) (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© s)))      ‚Üù‚ü® Œ£-map P.id (Œ£-map const P.id) ‚ü©

  (‚àÉ Œª (g : ‚àÄ a ‚Üí get a ‚â° a) ‚Üí
   ‚àÉ Œª (s : A ‚Üí ‚àÄ a ‚Üí set a ‚â° a) ‚Üí
     (‚àÄ a‚ÇÅ a‚ÇÇ ‚Üí get-set a‚ÇÅ a‚ÇÇ ‚â° trans (cong get (s a‚ÇÅ a‚ÇÇ)) (g a‚ÇÇ)) √ó
     (‚àÄ a ‚Üí set-get a ‚â° trans (s a (get a)) (g a)) √ó
     (‚àÄ a a‚ÇÅ a‚ÇÇ ‚Üí
        trans (set-set a a‚ÇÅ a‚ÇÇ) (s a a‚ÇÇ) ‚â°
        cong (Œª set ‚Üí set (set a a‚ÇÅ) a‚ÇÇ) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s))))        ‚Üî‚ü® inverse equality-characterisation-id ‚ü©‚ñ°

  l‚Ä≥ ‚â° id                                                             ‚ñ°
  where
  l‚Ä≥  = _‚Üî_.from Lens-as-Œ£ (Œ£-map P.id (Œ£-map const P.id) l‚Ä≤)
  set = proj‚ÇÅ (proj‚ÇÇ l‚Ä≤)

  open Lens l‚Ä≥ hiding (set)

-- An identity function for lenses for which the forward direction
-- is an equivalence.
--
-- Note that the setter of the resulting lens is definitionally
-- equal to a constant function returning the right-to-left
-- direction of the equivalence.
--
-- Note also that two proofs, set-get and set-set, have been
-- "obfuscated". They could have been shorter, but then it might not
-- have been possible to prove getter-equivalence‚Üílens‚â°.

getter-equivalence‚Üílens :
  (l : Lens A B) ‚Üí
  Is-equivalence (Lens.get l) ‚Üí
  Lens A B
getter-equivalence‚Üílens l is-equiv = record
  { get     = to
  ; set     = const from
  ; get-set = const right-inverse-of
  ; set-get = Œª a ‚Üí
              from (to a)                ‚â°‚ü® cong from (sym (get-set a (to a))) ‚ü©
              from (get (set a (to a)))  ‚â°‚ü®‚ü©
              from (to (set a (get a)))  ‚â°‚ü® cong (from ‚äö to) (set-get a) ‚ü©
              from (to a)                ‚â°‚ü® left-inverse-of _ ‚ü©‚àé
              a                          ‚àé
  ; set-set = Œª a b‚ÇÅ b‚ÇÇ ‚Üí
              let s = from‚â°set l is-equiv in
              from b‚ÇÇ            ‚â°‚ü® cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s)) ‚ü©
              set (set a b‚ÇÅ) b‚ÇÇ  ‚â°‚ü® set-set a b‚ÇÅ b‚ÇÇ ‚ü©
              set a b‚ÇÇ           ‚â°‚ü® sym (s a b‚ÇÇ) ‚ü©‚àé
              from b‚ÇÇ            ‚àé
  }
  where
  A‚âÉB = Eq.‚ü® _ , is-equiv ‚ü©

  open _‚âÉ_ A‚âÉB
  open Lens l

-- The function getter-equivalence‚Üílens returns its input.

getter-equivalence‚Üílens‚â° :
  ‚àÄ (l : Lens A B) is-equiv ‚Üí
  getter-equivalence‚Üílens l is-equiv ‚â° l
getter-equivalence‚Üílens‚â° l is-equiv =
  _‚Üî_.from equality-characterisation‚ÇÑ
    ( g
    , s
    , lemma‚ÇÅ
    , lemma‚ÇÇ
    , lemma‚ÇÉ
    )
  where
  open Lens

  A‚âÉB = Eq.‚ü® get l , is-equiv ‚ü©

  open _‚âÉ_ A‚âÉB

  l‚Ä≤ = getter-equivalence‚Üílens l is-equiv

  g = Œª _ ‚Üí refl _

  s = from‚â°set l is-equiv

  lemma‚ÇÅ = Œª a b ‚Üí
    let lem =
          cong (get l) (s a b)                               ‚â°‚ü®‚ü©

          cong (get l)
            (trans (cong from (sym (get-set l a b)))
               (left-inverse-of _))                          ‚â°‚ü® cong-trans _ _ (left-inverse-of _) ‚ü©

          trans (cong (get l)
                   (cong from (sym (get-set l a b))))
            (cong (get l) (left-inverse-of _))               ‚â°‚ü® cong‚ÇÇ trans
                                                                  (cong-‚àò _ _ (sym (get-set l a b)))
                                                                  (left-right-lemma _) ‚ü©‚àé
          trans (cong (get l ‚äö from) (sym (get-set l a b)))
            (right-inverse-of _)                             ‚àé
    in
    trans (sym (trans (cong (get l) (s a b))
                  (g (set l a b))))
      (get-set l‚Ä≤ a b)                                        ‚â°‚ü®‚ü©

    trans (sym (trans (cong (get l) (s a b)) (refl _)))
      (right-inverse-of _)                                    ‚â°‚ü® cong (Œª eq ‚Üí trans (sym eq) (right-inverse-of _)) $
                                                                 trans-refl ≥ _ ‚ü©
    trans (sym (cong (get l) (s a b)))
      (right-inverse-of _)                                    ‚â°‚ü® cong (Œª eq ‚Üí trans (sym eq) (right-inverse-of _)) lem ‚ü©

    trans (sym (trans (cong (get l ‚äö from)
                         (sym (get-set l a b)))
                  (right-inverse-of _)))
      (right-inverse-of _)                                    ‚â°‚ü® elim¬π
                                                                   (Œª eq ‚Üí trans (sym (trans (cong (get l ‚äö from) (sym eq))
                                                                                         (right-inverse-of _)))
                                                                             (right-inverse-of _) ‚â° eq) (
      trans (sym (trans (cong (get l ‚äö from) (sym (refl _)))
                    (right-inverse-of _)))
        (right-inverse-of _)                                         ‚â°‚ü® cong (Œª eq ‚Üí trans (sym (trans (cong (get l ‚äö from) eq) _)) _)
                                                                        sym-refl ‚ü©
      trans (sym (trans (cong (get l ‚äö from) (refl _))
                    (right-inverse-of _)))
        (right-inverse-of _)                                         ‚â°‚ü® cong (Œª eq ‚Üí trans (sym (trans eq _)) _) $
                                                                        cong-refl _ ‚ü©
      trans (sym (trans (refl _) (right-inverse-of _)))
        (right-inverse-of _)                                         ‚â°‚ü® cong (Œª eq ‚Üí trans (sym eq) (right-inverse-of _)) $
                                                                        trans-reflÀ° (right-inverse-of _) ‚ü©
      trans (sym (right-inverse-of _))
        (right-inverse-of _)                                         ‚â°‚ü® trans-symÀ° (right-inverse-of _) ‚ü©‚àé

      refl _                                                         ‚àé)
                                                                   _ ‚ü©‚àé
    get-set l a b                                             ‚àé

  lemma‚ÇÇ = Œª a ‚Üí
    trans (sym (trans (s a (get l a)) (cong (set l a) (g a))))
       (set-get l‚Ä≤ a)                                                  ‚â°‚ü®‚ü©

    trans (sym (trans (s a (get l a)) (cong (set l a) (refl _))))
       (set-get l‚Ä≤ a)                                                  ‚â°‚ü® cong (Œª eq ‚Üí trans (sym (trans (s a (get l a)) eq)) (set-get l‚Ä≤ a)) $
                                                                          cong-refl _ ‚ü©

    trans (sym (trans (s a (get l a)) (refl _))) (set-get l‚Ä≤ a)        ‚â°‚ü® cong (Œª eq ‚Üí trans (sym eq) (set-get l‚Ä≤ a)) $
                                                                          trans-refl ≥ _ ‚ü©

    trans (sym (s a (get l a))) (set-get l‚Ä≤ a)                         ‚â°‚ü®‚ü©

    trans (sym (trans (cong from (sym (get-set l a (get l a))))
                  (left-inverse-of _)))
      (trans (cong from (sym (get-set l a (get l a))))
         (trans (cong (from ‚äö get l) (set-get l a))
            (left-inverse-of _)))                                      ‚â°‚ü® cong (Œª eq ‚Üí trans (sym (trans
                                                                                                     (cong from (sym (get-set l a (get l a))))
                                                                                                     (left-inverse-of _)))
                                                                                         (trans (cong from (sym (get-set l a (get l a)))) eq)) $
                                                                          elim¬π
                                                                            (Œª eq ‚Üí trans (cong (from ‚äö get l) eq) (left-inverse-of _) ‚â°
                                                                                    trans (left-inverse-of _) eq)
                                                                            (
        trans (cong (from ‚äö get l) (refl _))
          (left-inverse-of (set l a (get l a)))                              ‚â°‚ü® cong (flip trans _) $ cong-refl _ ‚ü©

        trans (refl _) (left-inverse-of (set l a (get l a)))                 ‚â°‚ü® trans-reflÀ° _ ‚ü©

        left-inverse-of (set l a (get l a))                                  ‚â°‚ü® sym $ trans-refl ≥ _ ‚ü©‚àé

        trans (left-inverse-of (set l a (get l a))) (refl _)                 ‚àé)
                                                                            (set-get l a) ‚ü©
    trans (sym (trans (cong from
                         (sym (get-set l a (get l a))))
                  (left-inverse-of _)))
      (trans (cong from (sym (get-set l a (get l a))))
         (trans (left-inverse-of _) (set-get l a)))                    ‚â°‚ü® cong (trans _) $ sym $
                                                                          trans-assoc _ _ (set-get l a) ‚ü©
    trans (sym (trans (cong from
                         (sym (get-set l a (get l a))))
                  (left-inverse-of _)))
      (trans (trans (cong from (sym (get-set l a (get l a))))
               (left-inverse-of _))
         (set-get l a))                                                ‚â°‚ü® trans-sym-[trans] _ _ ‚ü©‚àé

    set-get l a                                                        ‚àé

  lemma‚ÇÉ = Œª a b‚ÇÅ b‚ÇÇ ‚Üí
    trans (set-set l‚Ä≤ a b‚ÇÅ b‚ÇÇ) (s a b‚ÇÇ)                           ‚â°‚ü®‚ü©

    trans (trans (cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ)
                    (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s)))
             (trans (set-set l a b‚ÇÅ b‚ÇÇ)
                (sym (s a b‚ÇÇ))))
      (s a b‚ÇÇ)                                                    ‚â°‚ü® cong (Œª eq ‚Üí trans eq (s a b‚ÇÇ)) $ sym $
                                                                     trans-assoc _ _ (sym (s a b‚ÇÇ)) ‚ü©
    trans (trans (trans (cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ)
                           (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s)))
                    (set-set l a b‚ÇÅ b‚ÇÇ))
             (sym (s a b‚ÇÇ)))
      (s a b‚ÇÇ)                                                    ‚â°‚ü® trans-[trans-sym]- _ (s a b‚ÇÇ) ‚ü©‚àé

    trans (cong (Œª set ‚Üí set (set a b‚ÇÅ) b‚ÇÇ) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s)))
      (set-set l a b‚ÇÅ b‚ÇÇ)                                         ‚àé

------------------------------------------------------------------------
-- Some existence results

-- The lenses bad¬†a and id¬†{A¬†=¬†‚Üë¬†a¬†ùïä¬π} have equal setters, and their
-- getters are equivalences, but they are not equal (assuming
-- univalence).

equal-setters-and-equivalences-as-getters-but-not-equal :
  Univalence lzero ‚Üí
  let l‚ÇÅ = bad a
      l‚ÇÇ = id {A = ‚Üë a ùïä¬π}
  in
  Is-equivalence (Lens.get l‚ÇÅ) √ó
  Is-equivalence (Lens.get l‚ÇÇ) √ó
  Lens.set l‚ÇÅ ‚â° Lens.set l‚ÇÇ √ó
  l‚ÇÅ ‚â¢ l‚ÇÇ
equal-setters-and-equivalences-as-getters-but-not-equal {a = ‚Ñìa} univ =
  let is-equiv , not-coherent , _ =
        getter-equivalence-but-not-coherent univ
  in
    is-equiv
  , _‚âÉ_.is-equivalence F.id
  , refl _
  , (bad ‚Ñìa ‚â° id                                        ‚Üù‚ü® (Œª eq ‚Üí subst (Œª l ‚Üí ‚àÄ a ‚Üí cong (get l) (set-get l a) ‚â°
                                                                                      get-set l a (get l a))
                                                                         (sym eq)
                                                                         (Œª _ ‚Üí cong-refl _)) ‚ü©
     (‚àÄ a ‚Üí cong (get (bad ‚Ñìa)) (set-get (bad ‚Ñìa) a) ‚â°
            get-set (bad ‚Ñìa) a (get (bad ‚Ñìa) a))        ‚Üù‚ü® not-coherent ‚ü©‚ñ°
     ‚ä•                                                  ‚ñ°)
  where
  open Lens

-- There is in general no split surjection from equivalences to lenses
-- with getters that are equivalences, if the right-to-left direction
-- of the split surjection is required to return the lens's getter
-- plus some proof (assuming univalence).

¬¨-‚âÉ-‚Ü†-Œ£-Lens-Is-equivalence-get :
  Univalence lzero ‚Üí
  ¬¨ ‚àÉ Œª (f : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚Ü†
             (‚àÉ Œª (l : Lens (‚Üë a ùïä¬π) (‚Üë a ùïä¬π)) ‚Üí
                Is-equivalence (Lens.get l))) ‚Üí
      ‚àÄ p ‚Üí _‚âÉ_.to (_‚Ü†_.from f p) ‚â° Lens.get (proj‚ÇÅ p)
¬¨-‚âÉ-‚Ü†-Œ£-Lens-Is-equivalence-get {a = a} univ =
  let is-equiv‚ÇÅ , is-equiv‚ÇÇ , _ , bad‚â¢id =
        equal-setters-and-equivalences-as-getters-but-not-equal univ
  in
  Œª (f , hyp) ‚Üí                                $‚ü® refl _ ‚ü©

    Lens.get (bad a) ‚â° Lens.get id             ‚Üù‚ü® (Œª eq ‚Üí trans (hyp _) (trans eq (sym (hyp _)))) ‚ü©

    _‚âÉ_.to (_‚Ü†_.from f (bad a , is-equiv‚ÇÅ)) ‚â°
    _‚âÉ_.to (_‚Ü†_.from f (id , is-equiv‚ÇÇ))       ‚Üù‚ü® Eq.lift-equality ext ‚ü©

    _‚Ü†_.from f (bad a , is-equiv‚ÇÅ) ‚â°
    _‚Ü†_.from f (id , is-equiv‚ÇÇ)                ‚Üù‚ü® _‚Ü†_.to (Surjection.‚Ü†-‚â° f) ‚ü©

    (bad a , is-equiv‚ÇÅ) ‚â° (id , is-equiv‚ÇÇ)     ‚Üù‚ü® cong proj‚ÇÅ ‚ü©

    bad a ‚â° id                                 ‚Üù‚ü® bad‚â¢id ‚ü©‚ñ°

    ‚ä•                                          ‚ñ°

-- There is in general no equivalence from equivalences to lenses with
-- getters that are equivalences, if the right-to-left direction of
-- the equivalence is required to return the lens's getter plus some
-- proof (assuming univalence).

¬¨-‚âÉ-‚âÉ-Œ£-Lens-Is-equivalence-get :
  Univalence lzero ‚Üí
  ¬¨ ‚àÉ Œª (f : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚âÉ
             (‚àÉ Œª (l : Lens (‚Üë a ùïä¬π) (‚Üë a ùïä¬π)) ‚Üí Is-equivalence (Lens.get l))) ‚Üí
      ‚àÄ p ‚Üí _‚âÉ_.to (_‚âÉ_.from f p) ‚â° Lens.get (proj‚ÇÅ p)
¬¨-‚âÉ-‚âÉ-Œ£-Lens-Is-equivalence-get {a = a} univ =
  (‚àÉ Œª (f : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚âÉ
            (‚àÉ Œª (l : Lens (‚Üë a ùïä¬π) (‚Üë a ùïä¬π)) ‚Üí
               Is-equivalence (Lens.get l))) ‚Üí
     ‚àÄ p ‚Üí _‚âÉ_.to (_‚âÉ_.from f p) ‚â° Lens.get (proj‚ÇÅ p))  ‚Üù‚ü® Œ£-map _‚âÉ_.surjection P.id ‚ü©

  (‚àÉ Œª (f : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚Ü†
            (‚àÉ Œª (l : Lens (‚Üë a ùïä¬π) (‚Üë a ùïä¬π)) ‚Üí
               Is-equivalence (Lens.get l))) ‚Üí
     ‚àÄ p ‚Üí _‚âÉ_.to (_‚Ü†_.from f p) ‚â° Lens.get (proj‚ÇÅ p))  ‚Üù‚ü® ¬¨-‚âÉ-‚Ü†-Œ£-Lens-Is-equivalence-get univ ‚ü©‚ñ°

  ‚ä•                                                     ‚ñ°

-- The lemma ‚âÉŒ£‚à•set‚Åª¬π‚à•√ó does not hold in general if the requirement
-- that A is a set is dropped (assuming univalence).
--
-- I proved this together with Paolo Capriotti.

‚âÑŒ£‚à•set‚Åª¬π‚à•√ó :
  Univalence lzero ‚Üí
  ¬¨ ({A B : Type a} (l : Lens A B) ‚Üí
     A ‚âÉ ((‚àÉ Œª (f : B ‚Üí A) ‚Üí ‚à• Lens.set l ‚Åª¬π f ‚à•) √ó B))
‚âÑŒ£‚à•set‚Åª¬π‚à•√ó {a = a} univ =
  ({A B : Type a} (l : Lens A B) ‚Üí
   A ‚âÉ ((‚àÉ Œª (f : B ‚Üí A) ‚Üí ‚à• Lens.set l ‚Åª¬π f ‚à•) √ó B))                      ‚Üù‚ü® (Œª hyp ‚Üí hyp) ‚ü©

  ((l : Lens (‚Üë a ùïä¬π) (‚Üë a ùïä¬π)) ‚Üí
   ‚Üë a ùïä¬π ‚âÉ ((‚àÉ Œª (f : ‚Üë a ùïä¬π ‚Üí ‚Üë a ùïä¬π) ‚Üí ‚à• Lens.set l ‚Åª¬π f ‚à•) √ó ‚Üë a ùïä¬π))  ‚Üù‚ü® _$ id ‚ü©

  ‚Üë a ùïä¬π ‚âÉ ((‚àÉ Œª (f : ‚Üë a ùïä¬π ‚Üí ‚Üë a ùïä¬π) ‚Üí ‚à• const P.id ‚Åª¬π f ‚à•) √ó ‚Üë a ùïä¬π)    ‚Üù‚ü® lemma ‚ü©

  ùïä¬π ‚âÉ (ùïä¬π √ó ùïä¬π)                                                           ‚Üù‚ü® ùïä¬π‚âÑùïä¬π√óùïä¬π ‚ü©‚ñ°

  ‚ä•                                                                        ‚ñ°
  where
  open Circle
  open Int

  lemma = Œª hyp ‚Üí
    ùïä¬π                                                            ‚Üî‚ü® inverse Bijection.‚Üë‚Üî ‚ü©

    ‚Üë a ùïä¬π                                                        ‚Üù‚ü® hyp ‚ü©

    (‚àÉ Œª (f : ‚Üë a ùïä¬π ‚Üí ‚Üë a ùïä¬π) ‚Üí ‚à• const P.id ‚Åª¬π f ‚à•) √ó ‚Üë a ùïä¬π    ‚Üî‚ü®‚ü©

    (‚àÉ Œª (f : ‚Üë a ùïä¬π ‚Üí ‚Üë a ùïä¬π) ‚Üí ‚à• ‚Üë a ùïä¬π √ó P.id ‚â° f ‚à•) √ó ‚Üë a ùïä¬π  ‚Üù‚ü® (√ó-cong‚ÇÅ Œª _ ‚Üí ‚àÉ-cong Œª _ ‚Üí T.‚à•‚à•-cong-‚áî $
                                                                      record { to = proj‚ÇÇ; from = Œª eq ‚Üí lift base , eq }) ‚ü©

    (‚àÉ Œª (f : ‚Üë a ùïä¬π ‚Üí ‚Üë a ùïä¬π) ‚Üí ‚à• P.id ‚â° f ‚à•) √ó ‚Üë a ùïä¬π           ‚Üù‚ü® (Œ£-cong (‚Üí-cong ext Bijection.‚Üë‚Üî Bijection.‚Üë‚Üî) Œª _ ‚Üí T.‚à•‚à•-cong $
                                                                      inverse $ Eq.‚âÉ-‚â° (Eq.‚Üî‚áí‚âÉ $ ‚Üí-cong ext Bijection.‚Üë‚Üî Bijection.‚Üë‚Üî))
                                                                       √ó-cong
                                                                     Eq.‚Üî‚áí‚âÉ Bijection.‚Üë‚Üî ‚ü©

    (‚àÉ Œª (f : ùïä¬π ‚Üí ùïä¬π) ‚Üí ‚à• P.id ‚â° f ‚à•) √ó ùïä¬π                       ‚Üù‚ü® (√ó-cong‚ÇÅ Œª _ ‚Üí
                                                                      Œ£-cong (ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§ univ) Œª f ‚Üí
                                                                      T.‚à•‚à•-cong (
      P.id ‚â° f                                                          ‚Üù‚ü® inverse $ Eq.‚âÉ-‚â° $ ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§ univ ‚ü©
      _‚âÉ_.to (ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§ univ) P.id ‚â° _‚âÉ_.to (ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§ univ) f        ‚Üù‚ü® ‚â°‚áí‚âÉ $ cong (_‚â° _‚âÉ_.to (ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§ univ) f) $ ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§-id univ ‚ü©
      (base , + 1) ‚â° _‚âÉ_.to (ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§ univ) f                         ‚Üî‚ü® ‚â°-comm ‚ü©‚ñ°
      _‚âÉ_.to (ùïä¬π‚Üíùïä¬π‚âÉùïä¬π√ó‚Ñ§ univ) f ‚â° (base , + 1)                         ‚ñ°)) ‚ü©

    (‚àÉ Œª (p : ùïä¬π √ó ‚Ñ§) ‚Üí ‚à• p ‚â° (base , + 1) ‚à•) √ó ùïä¬π                ‚Üî‚ü® (√ó-cong‚ÇÅ Œª _ ‚Üí ‚àÉ-cong Œª _ ‚Üí inverse $
                                                                      T.‚à•‚à•-cong ‚â°√ó‚â°‚Üî‚â° F.‚àò T.‚à•‚à•√ó‚à•‚à•‚Üî‚à•√ó‚à•) ‚ü©

    (‚àÉ Œª ((x , i) : ùïä¬π √ó ‚Ñ§) ‚Üí ‚à• x ‚â° base ‚à• √ó ‚à• i ‚â° + 1 ‚à•) √ó ùïä¬π    ‚Üî‚ü® (√ó-cong‚ÇÅ Œª _ ‚Üí
                                                                      Œ£-assoc F.‚àò
                                                                      (‚àÉ-cong Œª _ ‚Üí ‚àÉ-comm) F.‚àò
                                                                      inverse Œ£-assoc) ‚ü©

    ((‚àÉ Œª x ‚Üí ‚à• x ‚â° base ‚à•) √ó (‚àÉ Œª i ‚Üí ‚à• i ‚â° + 1 ‚à•)) √ó ùïä¬π         ‚Üî‚ü® (√ó-cong‚ÇÅ Œª _ ‚Üí
                                                                      (drop-‚ä§-right Œª _ ‚Üí
                                                                       T.inhabited‚áí‚à•‚à•‚Üî‚ä§ $ all-points-on-the-circle-are-merely-equal _)
                                                                        √ó-cong
                                                                      ‚àÉ-cong Œª _ ‚Üí T.‚à•‚à•‚Üî ‚Ñ§-set) ‚ü©

    (ùïä¬π √ó (‚àÉ Œª i ‚Üí i ‚â° + 1)) √ó ùïä¬π                                 ‚Üî‚ü® (√ó-cong‚ÇÅ Œª _ ‚Üí drop-‚ä§-right Œª _ ‚Üí _‚áî_.to contractible‚áî‚Üî‚ä§ $
                                                                      singleton-contractible _) ‚ü©‚ñ°
    ùïä¬π √ó ùïä¬π                                                       ‚ñ°

------------------------------------------------------------------------
-- Isomorphisms expressed using lens quasi-inverses

private

  module B {a} =
    Bi-invertibility
      equality-with-J (Type a) Lens id _‚àò_
  module BM {a} =
    B.More {a = a} left-identity right-identity associativity

-- A form of isomorphism between types, expressed using lenses.

open B public
  using ()
  renaming (_‚âÖ_ to _‚âÖ_; Has-quasi-inverse to Has-quasi-inverse)

-- An equality characterisation lemma for A¬†‚âÖ¬†B that applies when A is
-- a set.

equality-characterisation-for-sets-‚âÖ :
  let open Lens in
  {f‚ÇÅ@(l‚ÇÅ‚ÇÅ , _) f‚ÇÇ@(l‚ÇÅ‚ÇÇ , _) : A ‚âÖ B} ‚Üí
  Is-set A ‚Üí
  f‚ÇÅ ‚â° f‚ÇÇ ‚Üî set l‚ÇÅ‚ÇÅ ‚â° set l‚ÇÅ‚ÇÇ
equality-characterisation-for-sets-‚âÖ
  {f‚ÇÅ = f‚ÇÅ@(l‚ÇÅ‚ÇÅ , _)} {f‚ÇÇ = f‚ÇÇ@(l‚ÇÅ‚ÇÇ , _)} A-set =
  f‚ÇÅ ‚â° f‚ÇÇ            ‚Üî‚ü® BM.equality-characterisation-‚âÖ-domain (lens-preserves-h-level-of-domain 1 A-set) _ _ ‚ü©
  l‚ÇÅ‚ÇÅ ‚â° l‚ÇÅ‚ÇÇ          ‚Üù‚ü® equality-characterisation-for-sets A-set ‚ü©‚ñ°
  set l‚ÇÅ‚ÇÅ ‚â° set l‚ÇÅ‚ÇÇ  ‚ñ°
  where
  open Lens

-- There is a split surjection from A¬†‚âÖ¬†B to A¬†‚âÉ¬†B.

‚âÖ‚Ü†‚âÉ : (A ‚âÖ B) ‚Ü† (A ‚âÉ B)
‚âÖ‚Ü†‚âÉ {A = A} {B = B} = record
  { logical-equivalence = record
    { to   = Œª (l‚ÇÅ , l‚ÇÇ , eq‚ÇÅ , eq‚ÇÇ) ‚Üí Eq.‚Üî‚áí‚âÉ (record
               { surjection = record
                 { logical-equivalence = record
                   { to   = get l‚ÇÅ
                   ; from = get l‚ÇÇ
                   }
                 ; right-inverse-of = ext‚Åª¬π $
                     getters-equal-if-setters-equal (l‚ÇÅ ‚àò l‚ÇÇ) id
                       (cong set eq‚ÇÅ)
               }
               ; left-inverse-of = ext‚Åª¬π $
                   getters-equal-if-setters-equal (l‚ÇÇ ‚àò l‚ÇÅ) id
                     (cong set eq‚ÇÇ)
               })
    ; from = Œª A‚âÉB ‚Üí ‚âÉ‚Üílens A‚âÉB
                   , ‚âÉ‚Üílens (inverse A‚âÉB)
                   , lemma A‚âÉB
                   , (‚âÉ‚Üílens (inverse A‚âÉB) ‚àò ‚âÉ‚Üílens A‚âÉB  ‚â°‚ü® cong (Œª A‚âÉB‚Ä≤ ‚Üí ‚âÉ‚Üílens (inverse A‚âÉB) ‚àò ‚âÉ‚Üílens A‚âÉB‚Ä≤) $
                                                            sym $ Eq.inverse-involutive ext A‚âÉB ‚ü©
                      ‚âÉ‚Üílens (inverse A‚âÉB) ‚àò
                      ‚âÉ‚Üílens (inverse $ inverse A‚âÉB)     ‚â°‚ü® lemma (inverse A‚âÉB) ‚ü©‚àé

                      id                                 ‚àé)
    }
  ; right-inverse-of = Œª _ ‚Üí Eq.lift-equality ext (refl _)
  }
  where
  open Lens

  lemma :
    (C‚âÉD : C ‚âÉ D) ‚Üí ‚âÉ‚Üílens C‚âÉD ‚àò ‚âÉ‚Üílens (inverse C‚âÉD) ‚â° id
  lemma C‚âÉD = _‚Üî_.from equality-characterisation‚ÇÇ
    ( ‚ü®ext‚ü© (_‚âÉ_.right-inverse-of C‚âÉD)
    , (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)
    , lemma‚ÇÅ
    , lemma‚ÇÇ
    , lemma‚ÇÉ
    )
    where
    lemma‚ÇÅ = Œª d‚ÇÅ d‚ÇÇ ‚Üí
      let lemma =
            cong (Œª set ‚Üí _‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD (set d‚ÇÅ d‚ÇÇ)))
              (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)      ‚â°‚ü® cong (cong (Œª set ‚Üí _‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD (set d‚ÇÅ d‚ÇÇ)))) $
                                                                     ext-const (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD) ‚ü©

            cong (Œª set ‚Üí _‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD (set d‚ÇÅ d‚ÇÇ)))
              (cong const $ ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)     ‚â°‚ü® cong-‚àò _ _ (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD) ‚ü©

            cong (Œª set ‚Üí _‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD (set d‚ÇÇ)))
              (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)                  ‚â°‚ü® sym $ cong-‚àò _ _ (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD) ‚ü©

            cong (_‚âÉ_.to C‚âÉD ‚äö _‚âÉ_.from C‚âÉD)
              (cong (Œª set ‚Üí set d‚ÇÇ)
                 (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD))              ‚â°‚ü® cong (cong (_‚âÉ_.to C‚âÉD ‚äö _‚âÉ_.from C‚âÉD)) $ cong-ext _ ‚ü©

            cong (_‚âÉ_.to C‚âÉD ‚äö _‚âÉ_.from C‚âÉD)
              (_‚âÉ_.right-inverse-of C‚âÉD _)                        ‚â°‚ü® sym $ cong-‚àò _ _ (_‚âÉ_.right-inverse-of C‚âÉD _) ‚ü©

            cong (_‚âÉ_.to C‚âÉD)
              (cong (_‚âÉ_.from C‚âÉD) (_‚âÉ_.right-inverse-of C‚âÉD _))  ‚â°‚ü® cong (cong (_‚âÉ_.to C‚âÉD)) $ _‚âÉ_.right-left-lemma C‚âÉD _ ‚ü©‚àé

            cong (_‚âÉ_.to C‚âÉD) (_‚âÉ_.left-inverse-of C‚âÉD _)         ‚àé
      in

      trans (sym
        (trans (cong (Œª set ‚Üí _‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD (set d‚ÇÅ d‚ÇÇ)))
                  (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD))
           (cong (Œª get ‚Üí get d‚ÇÇ)
              (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD))))
      (trans (cong (_‚âÉ_.to C‚âÉD) (_‚âÉ_.left-inverse-of C‚âÉD _))
         (_‚âÉ_.right-inverse-of C‚âÉD _))                                ‚â°‚ü® cong‚ÇÇ (Œª p q ‚Üí trans (sym (trans p q))
                                                                                          (trans (cong (_‚âÉ_.to C‚âÉD) (_‚âÉ_.left-inverse-of C‚âÉD _))
                                                                                             (_‚âÉ_.right-inverse-of C‚âÉD _)))
                                                                           lemma
                                                                           (cong-ext _) ‚ü©
      trans (sym
        (trans (cong (_‚âÉ_.to C‚âÉD) (_‚âÉ_.left-inverse-of C‚âÉD _))
           (_‚âÉ_.right-inverse-of C‚âÉD _)))
      (trans (cong (_‚âÉ_.to C‚âÉD) (_‚âÉ_.left-inverse-of C‚âÉD _))
         (_‚âÉ_.right-inverse-of C‚âÉD _))                                ‚â°‚ü® trans-symÀ° (trans _ (_‚âÉ_.right-inverse-of C‚âÉD _)) ‚ü©‚àé

      refl _                                                          ‚àé

    lemma‚ÇÇ = Œª d ‚Üí
      let lemma =
            cong (Œª set ‚Üí set d (_‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD d)))
              (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)    ‚â°‚ü® cong (cong (Œª set ‚Üí set d (_‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD d)))) $
                                                                   ext-const (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD) ‚ü©

            cong (Œª set ‚Üí set d (_‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD d)))
              (cong const $ ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)   ‚â°‚ü® cong-‚àò _ _ (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD) ‚ü©

            cong (Œª set ‚Üí set (_‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD d)))
              (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)                ‚â°‚ü® cong-ext _ ‚ü©‚àé

            _‚âÉ_.right-inverse-of C‚âÉD _                          ‚àé
      in
      trans (sym
        (trans (cong (Œª set ‚Üí set d (_‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD d)))
                  (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD))
           (cong (Œª get ‚Üí get d)
              (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD))))
        (trans
           (cong (_‚âÉ_.to C‚âÉD) (_‚âÉ_.left-inverse-of C‚âÉD _))
           (_‚âÉ_.left-inverse-of (inverse C‚âÉD) _))                   ‚â°‚ü® cong‚ÇÇ (Œª p q ‚Üí trans (sym p) q)
                                                                         (cong‚ÇÇ trans lemma (cong-ext _))
                                                                         (cong‚ÇÇ trans
                                                                            (_‚âÉ_.left-right-lemma C‚âÉD _)
                                                                            (Eq.left-inverse-of‚àòinverse C‚âÉD)) ‚ü©
      trans (sym (trans (_‚âÉ_.right-inverse-of C‚âÉD _)
                    (_‚âÉ_.right-inverse-of C‚âÉD _)))
        (trans (_‚âÉ_.right-inverse-of C‚âÉD _)
           (_‚âÉ_.right-inverse-of C‚âÉD _))                            ‚â°‚ü® trans-symÀ° (trans _ (_‚âÉ_.right-inverse-of C‚âÉD _)) ‚ü©‚àé

      refl _                                                        ‚àé

    lemma‚ÇÉ = Œª d d‚ÇÅ d‚ÇÇ ‚Üí
      subst (Œª set ‚Üí set (set d d‚ÇÅ) d‚ÇÇ ‚â° set d d‚ÇÇ)
         (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)
         (trans (refl _)
            (trans
               (cong (Œª _ ‚Üí _‚âÉ_.to C‚âÉD (_‚âÉ_.from C‚âÉD d‚ÇÇ))
                  (_‚âÉ_.right-inverse-of (inverse C‚âÉD)
                     (_‚âÉ_.from C‚âÉD d‚ÇÅ)))
               (cong (_‚âÉ_.to C‚âÉD) (refl _))))              ‚â°‚ü® cong (subst (Œª set ‚Üí set (set d d‚ÇÅ) d‚ÇÇ ‚â° set d d‚ÇÇ)
                                                                       (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)) $
                                                              trans (trans-reflÀ° _) $
                                                              trans (cong (flip trans _) $ cong-const _) $
                                                              trans (trans-reflÀ° _) $
                                                              cong-refl _ ‚ü©
      subst (Œª set ‚Üí set (set d d‚ÇÅ) d‚ÇÇ ‚â° set d d‚ÇÇ)
         (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)
         (refl _)                                          ‚â°‚ü® cong (flip (subst (Œª set ‚Üí set (set d d‚ÇÅ) d‚ÇÇ ‚â° set d d‚ÇÇ)) _) $
                                                              ext-const (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD) ‚ü©
      subst (Œª set ‚Üí set (set d d‚ÇÅ) d‚ÇÇ ‚â° set d d‚ÇÇ)
        (cong const $ ‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)
        (refl _)                                           ‚â°‚ü® sym $ subst-‚àò _ _ _ ‚ü©

      subst (Œª set ‚Üí set d‚ÇÇ ‚â° set d‚ÇÇ)
        (‚ü®ext‚ü© $ _‚âÉ_.right-inverse-of C‚âÉD)
        (refl _)                                           ‚â°‚ü® subst-ext _ _ ‚ü©

      subst (Œª set ‚Üí set ‚â° set)
        (_‚âÉ_.right-inverse-of C‚âÉD d‚ÇÇ)
        (refl _)                                           ‚â°‚ü® ‚â°‚áí‚Üù _ (sym [subst‚â°]‚â°[trans‚â°trans]) (

          trans (refl _) (_‚âÉ_.right-inverse-of C‚âÉD d‚ÇÇ)          ‚â°‚ü® trans-reflÀ° _ ‚ü©
          _‚âÉ_.right-inverse-of C‚âÉD d‚ÇÇ                           ‚â°‚ü® sym $ trans-refl ≥ _ ‚ü©
          trans (_‚âÉ_.right-inverse-of C‚âÉD d‚ÇÇ) (refl _)          ‚àé) ‚ü©

      refl _                                               ‚àé

-- The right-to-left direction of ‚âÖ‚Ü†‚âÉ maps identity to an isomorphism
-- for which the first projection is the identity.

‚âÖ‚Ü†‚âÉ-id‚â°id : proj‚ÇÅ (_‚Ü†_.from ‚âÖ‚Ü†‚âÉ F.id) ‚â° id {A = A}
‚âÖ‚Ü†‚âÉ-id‚â°id = equal-laws‚Üí‚â°
  (Œª _ _ ‚Üí refl _)
  (Œª a ‚Üí
     _‚âÉ_.left-inverse-of F.id a               ‚â°‚ü® sym $ _‚âÉ_.right-left-lemma F.id _ ‚ü©
     cong P.id (_‚âÉ_.right-inverse-of F.id a)  ‚â°‚ü®‚ü©
     cong P.id (refl _)                       ‚â°‚ü® sym $ cong-id _ ‚ü©‚àé
     refl _                                   ‚àé)
  (Œª _ _ _ ‚Üí refl _)

-- If A is a set, then there is an equivalence between A¬†‚âÉ¬†B and A¬†‚âÖ¬†B.

‚âÉ‚âÉ‚âÖ :
  Is-set A ‚Üí
  (A ‚âÉ B) ‚âÉ (A ‚âÖ B)
‚âÉ‚âÉ‚âÖ {A = A} {B = B} A-set = Eq.‚Üî‚áí‚âÉ $ inverse (record
  { surjection      = ‚âÖ‚Ü†‚âÉ
  ; left-inverse-of = Œª (l‚ÇÅ , l‚ÇÇ , eq‚ÇÅ , eq‚ÇÇ) ‚Üí
      _‚Üî_.from (equality-characterisation-for-sets-‚âÖ A-set) $
      ‚ü®ext‚ü© Œª a ‚Üí ‚ü®ext‚ü© Œª b ‚Üí
        get l‚ÇÇ b                                            ‚â°‚ü® sym $ ext‚Åª¬π (ext‚Åª¬π (cong set eq‚ÇÇ) _) _ ‚ü©

        set l‚ÇÅ (set l‚ÇÅ a b)
          (set l‚ÇÇ (get l‚ÇÅ (set l‚ÇÅ a b)) (get l‚ÇÇ b))         ‚â°‚ü® set-set l‚ÇÅ _ _ _ ‚ü©

        set l‚ÇÅ a (set l‚ÇÇ (get l‚ÇÅ (set l‚ÇÅ a b)) (get l‚ÇÇ b))  ‚â°‚ü® cong (Œª b‚Ä≤ ‚Üí set l‚ÇÅ a (set l‚ÇÇ b‚Ä≤ (get l‚ÇÇ b))) $ get-set l‚ÇÅ _ _ ‚ü©

        set l‚ÇÅ a (set l‚ÇÇ b (get l‚ÇÇ b))                      ‚â°‚ü® cong (set l‚ÇÅ a) $ set-get l‚ÇÇ _ ‚ü©‚àé

        set l‚ÇÅ a b                                          ‚àé
  })
  where
  open Lens

-- The equivalence maps identity to an isomorphism for which the first
-- projection is the identity.

‚âÉ‚âÉ‚âÖ-id‚â°id :
  (A-set : Is-set A) ‚Üí
  proj‚ÇÅ (_‚âÉ_.to (‚âÉ‚âÉ‚âÖ A-set) F.id) ‚â° id
‚âÉ‚âÉ‚âÖ-id‚â°id _ = ‚âÖ‚Ü†‚âÉ-id‚â°id

-- The type Has-quasi-inverse¬†id is not necessarily a proposition
-- (assuming univalence).
--
-- (The lemma does not actually use the univalence argument, but
-- univalence is used by Circle.¬¨-type-of-refl-propositional.)

Has-quasi-inverse-id-not-proposition :
  Univalence lzero ‚Üí
  ‚àÉ Œª (A : Type a) ‚Üí
    ¬¨ Is-proposition (Has-quasi-inverse (id {A = A}))
Has-quasi-inverse-id-not-proposition _ =
    X
  , (Is-proposition (Has-quasi-inverse id)         ‚Üù‚ü® flip propositional‚áíinhabited‚áícontractible q ‚ü©
     Contractible (Has-quasi-inverse id)           ‚Üù‚ü® H-level-cong _ 0 lemma‚ÇÅ ‚ü©
     Contractible (‚àÉ Œª (g : (x : X) ‚Üí x ‚â° x) ‚Üí _)  ‚Üù‚ü® flip proj‚ÇÅ-closure 0
                                                        (Œª g ‚Üí (Œª _ x ‚Üí sym (g x)) , lemma‚ÇÇ g , lemma‚ÇÉ g , lemma‚ÇÑ g) ‚ü©
     Contractible ((x : X) ‚Üí x ‚â° x)                ‚Üù‚ü® mono‚ÇÅ 0 ‚ü©
     Is-proposition ((x : X) ‚Üí x ‚â° x)              ‚Üù‚ü® ¬¨-prop ‚ü©‚ñ°
     ‚ä•                                             ‚ñ°)
  where
  X      = Erased (proj‚ÇÅ Circle.¬¨-type-of-refl-propositional)
  ¬¨-prop =
    E.Stable-¬¨
      [ Is-proposition ((x : X) ‚Üí x ‚â° x)       ‚Üù‚ü® H-level-cong _ 1 (Œ†-cong ext (E.erased E.Erased‚Üî) Œª _ ‚Üí inverse E.‚â°‚âÉ[]‚â°[]) ‚ü©
        Is-proposition ((x : ‚Üë _ ùïä¬π) ‚Üí x ‚â° x)  ‚Üù‚ü® proj‚ÇÇ Circle.¬¨-type-of-refl-propositional ‚ü©‚ñ°
        ‚ä•                                      ‚ñ°
      ]

  q = id , left-identity _ , right-identity _

  lemma‚ÇÅ =
    Has-quasi-inverse id                                             ‚Üù‚ü® BM.Has-quasi-inverse‚âÉid‚â°id-domain q ‚ü©

    id ‚â° id                                                          ‚Üî‚ü® equality-characterisation‚ÇÑ ‚ü©‚ñ°

    (‚àÉ Œª (g : ‚àÄ x ‚Üí x ‚â° x) ‚Üí
     ‚àÉ Œª (s : X ‚Üí ‚àÄ x ‚Üí x ‚â° x) ‚Üí
       (‚àÄ x y ‚Üí
          trans (sym (trans (cong P.id (s x y)) (g y))) (refl _) ‚â°
          refl _) √ó
       (‚àÄ x ‚Üí
          trans (sym (trans (s x x) (cong P.id (g x)))) (refl _) ‚â°
          refl _) √ó
       (‚àÄ x y z ‚Üí
         trans (refl _) (s x z) ‚â°
         trans (cong (Œª set ‚Üí set (set x y) z) (‚ü®ext‚ü© (‚ü®ext‚ü© ‚äö s)))
           (refl _)))                                                ‚ñ°

  lemma‚ÇÇ : (g : ‚àÄ x ‚Üí x ‚â° x) (x y : X) ‚Üí _
  lemma‚ÇÇ g x y =
    trans (sym (trans (cong P.id (sym (g y))) (g y))) (refl _)  ‚â°‚ü® trans-refl ≥ _ ‚ü©
    sym (trans (cong P.id (sym (g y))) (g y))                   ‚â°‚ü® cong (Œª eq ‚Üí sym (trans eq (g y))) $ sym $ cong-id _ ‚ü©
    sym (trans (sym (g y)) (g y))                               ‚â°‚ü® cong sym $ trans-symÀ° (g y) ‚ü©
    sym (refl _)                                                ‚â°‚ü® sym-refl ‚ü©‚àé
    refl _                                                      ‚àé

  lemma‚ÇÉ : (g : ‚àÄ x ‚Üí x ‚â° x) (x : X) ‚Üí _
  lemma‚ÇÉ g x =
    trans (sym (trans (sym (g x)) (cong P.id (g x)))) (refl _)  ‚â°‚ü® trans-refl ≥ _ ‚ü©
    sym (trans (sym (g x)) (cong P.id (g x)))                   ‚â°‚ü® cong (Œª eq ‚Üí sym (trans (sym (g x)) eq)) $ sym $ cong-id (g x) ‚ü©
    sym (trans (sym (g x)) (g x))                               ‚â°‚ü® cong sym $ trans-symÀ° (g x) ‚ü©
    sym (refl _)                                                ‚â°‚ü® sym-refl ‚ü©‚àé
    refl _                                                      ‚àé

  lemma‚ÇÑ : (g : ‚àÄ x ‚Üí x ‚â° x) (x y z : X) ‚Üí _
  lemma‚ÇÑ g x y z =
    trans (refl _) (sym (g z))                                            ‚â°‚ü® trans-reflÀ° (sym (g z)) ‚ü©
    sym (g z)                                                             ‚â°‚ü® sym $ cong-ext (sym ‚äö g) ‚ü©
    cong (_$ z) (‚ü®ext‚ü© (sym ‚äö g))                                         ‚â°‚ü® sym $ cong-‚àò _ _ (‚ü®ext‚ü© (sym ‚äö g)) ‚ü©
    cong (Œª set ‚Üí set (set x y) z) (cong const (‚ü®ext‚ü© (sym ‚äö g)))         ‚â°‚ü® cong (cong (Œª set ‚Üí set (set x y) z)) $ sym $ ext-const (‚ü®ext‚ü© (sym ‚äö g)) ‚ü©
    cong (Œª set ‚Üí set (set x y) z) (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© (sym ‚äö g))          ‚â°‚ü® sym $ trans-refl ≥ _ ‚ü©‚àé
    trans (cong (Œª set ‚Üí set (set x y) z) (‚ü®ext‚ü© Œª _ ‚Üí ‚ü®ext‚ü© (sym ‚äö g)))
      (refl _)                                                            ‚àé

-- There is not necessarily a split surjection from
-- Is-equivalence¬†(Lens.get¬†l) to Has-quasi-inverse¬†l, if l is a lens
-- between types in the same universe (assuming univalence).

¬¨Is-equivalence‚Ü†Has-quasi-inverse :
  Univalence lzero ‚Üí
  ¬¨ ({A B : Type a}
     (l : Lens A B) ‚Üí
     Is-equivalence (Lens.get l) ‚Ü† Has-quasi-inverse l)
¬¨Is-equivalence‚Ü†Has-quasi-inverse univ surj =
                                         $‚ü® mono‚ÇÅ 0 ‚ä§-contractible ‚ü©
  Is-proposition ‚ä§                       ‚Üù‚ü® H-level.respects-surjection lemma 1 ‚ü©
  Is-proposition (Has-quasi-inverse id)  ‚Üù‚ü® proj‚ÇÇ $ Has-quasi-inverse-id-not-proposition univ ‚ü©‚ñ°
  ‚ä•                                      ‚ñ°
  where
  lemma =
    ‚ä§                     ‚Üî‚ü® inverse $ _‚áî_.to contractible‚áî‚Üî‚ä§ $
                             propositional‚áíinhabited‚áícontractible
                               (Eq.propositional ext _)
                               (_‚âÉ_.is-equivalence Eq.id) ‚ü©
    Is-equivalence P.id   ‚Üù‚ü® surj id ‚ü©‚ñ°
    Has-quasi-inverse id  ‚ñ°

------------------------------------------------------------------------
-- Isomorphisms expressed using bi-invertibility for lenses

-- A form of isomorphism between types, expressed using lenses.

open B public
  using ()
  renaming (_‚âä_ to _‚âä_;
            Has-left-inverse to Has-left-inverse;
            Has-right-inverse to Has-right-inverse;
            Is-bi-invertible to Is-bi-invertible)

open BM public
  using ()
  renaming (Is-bi-invertible-propositional to
            Is-bi-invertible-propositional)

-- An equality characterisation lemma for A¬†‚âä¬†B that applies when A is
-- a set.

equality-characterisation-for-sets-‚âä :
  let open Lens in
  {f‚ÇÅ@(l‚ÇÅ‚ÇÅ , _) f‚ÇÇ@(l‚ÇÅ‚ÇÇ , _) : A ‚âä B} ‚Üí
  Is-set A ‚Üí
  f‚ÇÅ ‚â° f‚ÇÇ ‚Üî set l‚ÇÅ‚ÇÅ ‚â° set l‚ÇÅ‚ÇÇ
equality-characterisation-for-sets-‚âä
  {f‚ÇÅ = f‚ÇÅ@(l‚ÇÅ‚ÇÅ , _)} {f‚ÇÇ = f‚ÇÇ@(l‚ÇÅ‚ÇÇ , _)} A-set =
  f‚ÇÅ ‚â° f‚ÇÇ            ‚Üî‚ü® BM.equality-characterisation-‚âä _ _ ‚ü©
  l‚ÇÅ‚ÇÅ ‚â° l‚ÇÅ‚ÇÇ          ‚Üù‚ü® equality-characterisation-for-sets A-set ‚ü©‚ñ°
  set l‚ÇÅ‚ÇÅ ‚â° set l‚ÇÅ‚ÇÇ  ‚ñ°
  where
  open Lens

-- There is a split surjection from A¬†‚âä¬†B to A¬†‚âÉ¬†B.

‚âä‚Ü†‚âÉ : (A ‚âä B) ‚Ü† (A ‚âÉ B)
‚âä‚Ü†‚âÉ = record
  { logical-equivalence = record
    { to   = _‚Ü†_.to ‚âÖ‚Ü†‚âÉ ‚äö _‚Ü†_.from BM.‚âÖ‚Ü†‚âä
    ; from = _‚Ü†_.to BM.‚âÖ‚Ü†‚âä ‚äö _‚Ü†_.from ‚âÖ‚Ü†‚âÉ
    }
  ; right-inverse-of = Œª _ ‚Üí Eq.lift-equality ext (refl _)
  }

-- The right-to-left direction maps identity to an isomorphism for
-- which the first projection is the identity.

‚âä‚Ü†‚âÉ-id‚â°id :
  proj‚ÇÅ (_‚Ü†_.from ‚âä‚Ü†‚âÉ F.id) ‚â° id {A = A}
‚âä‚Ü†‚âÉ-id‚â°id = equal-laws‚Üí‚â°
  (Œª _ _ ‚Üí refl _)
  (Œª a ‚Üí
     _‚âÉ_.left-inverse-of F.id a               ‚â°‚ü® sym $ _‚âÉ_.right-left-lemma F.id _ ‚ü©
     cong P.id (_‚âÉ_.right-inverse-of F.id a)  ‚â°‚ü®‚ü©
     cong P.id (refl _)                       ‚â°‚ü® sym $ cong-id _ ‚ü©‚àé
     refl _                                   ‚àé)
  (Œª _ _ _ ‚Üí refl _)

-- If A is a set, then there is an equivalence between A¬†‚âä¬†B and
-- A¬†‚âÉ¬†B.

‚âÉ‚âÉ‚âä : Is-set A ‚Üí (A ‚âÉ B) ‚âÉ (A ‚âä B)
‚âÉ‚âÉ‚âä {A = A} {B = B} A-set =
  A ‚âÉ B  ‚Üù‚ü® ‚âÉ‚âÉ‚âÖ A-set ‚ü©
  A ‚âÖ B  ‚Üù‚ü® inverse $ BM.‚âä‚âÉ‚âÖ-domain (lens-preserves-h-level-of-domain 1 A-set) ‚ü©‚ñ°
  A ‚âä B  ‚ñ°

-- The equivalence ‚âÉ‚âÉ‚âä maps identity to an isomorphism for which the
-- first projection is the identity.

‚âÉ‚âÉ‚âä-id‚â°id :
  (A-set : Is-set A) ‚Üí
  proj‚ÇÅ (_‚âÉ_.to (‚âÉ‚âÉ‚âä A-set) F.id) ‚â° id
‚âÉ‚âÉ‚âä-id‚â°id _ = ‚âä‚Ü†‚âÉ-id‚â°id

-- The right-to-left direction of ‚âÉ‚âÉ‚âä maps bi-invertible lenses to
-- their getter functions.

to-from-‚âÉ‚âÉ‚âä‚â°get :
  (A-set : Is-set A) (A‚âäB@(l , _) : A ‚âä B) ‚Üí
  _‚âÉ_.to (_‚âÉ_.from (‚âÉ‚âÉ‚âä A-set) A‚âäB) ‚â° Lens.get l
to-from-‚âÉ‚âÉ‚âä‚â°get _ _ = refl _

-- The getter function of a bi-invertible lens is an equivalence.

Is-bi-invertible‚ÜíIs-equivalence-get :
  (l : Lens A B) ‚Üí
  Is-bi-invertible l ‚Üí Is-equivalence (Lens.get l)
Is-bi-invertible‚ÜíIs-equivalence-get l is-bi-inv =
  _‚âÉ_.is-equivalence (_‚Ü†_.to ‚âä‚Ü†‚âÉ (l , is-bi-inv))

-- If the getter function is an equivalence, then the lens is
-- bi-invertible.

Is-equivalence-get‚ÜíIs-bi-invertible :
  (l : Lens A B) ‚Üí
  Is-equivalence (Lens.get l) ‚Üí Is-bi-invertible l
Is-equivalence-get‚ÜíIs-bi-invertible {A = A} {B = B} l‚Ä≤ is-equiv =
  block Œª b ‚Üí
                       $‚ü® l‚Åª¬π‚Ä≤ b , l‚àòl‚Åª¬π‚â°id b , l‚Åª¬π‚àòl‚â°id b ‚ü©
  Has-quasi-inverse l  ‚Üù‚ü® B.Has-quasi-inverse‚ÜíIs-bi-invertible l ‚ü©
  Is-bi-invertible l   ‚Üù‚ü® subst Is-bi-invertible (getter-equivalence‚Üílens‚â° l‚Ä≤ is-equiv) ‚ü©‚ñ°
  Is-bi-invertible l‚Ä≤  ‚ñ°
  where
  open Lens

  -- A lens that is equal to l‚Ä≤.

  l : Lens A B
  l = getter-equivalence‚Üílens l‚Ä≤ is-equiv

  A‚âÉB = Eq.‚ü® get l , is-equiv ‚ü©

  open _‚âÉ_ A‚âÉB

  -- An inverse of l.
  --
  -- Note that the set-get and set-set proofs have been "obfuscated".
  -- They could have been shorter, but then it might not have been
  -- possible to prove l‚àòl‚Åª¬π‚â°id and l‚Åª¬π‚àòl‚â°id.

  l‚Åª¬π : Lens B A
  l‚Åª¬π = record
    { get     = from
    ; set     = Œª _ ‚Üí get l
    ; get-set = Œª _ a ‚Üí
                  from (get l a)  ‚â°‚ü® left-inverse-of a ‚ü©‚àé
                  a               ‚àé
    ; set-get = Œª b ‚Üí
                  get l (from b)                 ‚â°‚ü® sym $ cong (get l) $ set-get l (from b) ‚ü©
                  get l (from (get l (from b)))  ‚â°‚ü® right-inverse-of (get l (from b)) ‚ü©
                  get l (from b)                 ‚â°‚ü® right-inverse-of b ‚ü©‚àé
                  b                              ‚àé
    ; set-set = Œª b a‚ÇÅ a‚ÇÇ ‚Üí
                  get l a‚ÇÇ                 ‚â°‚ü® sym $ right-inverse-of _ ‚ü©
                  get l (from (get l a‚ÇÇ))  ‚â°‚ü® sym $ cong (get l) (set-set l (from b) (get l a‚ÇÅ) (get l a‚ÇÇ)) ‚ü©
                  get l (from (get l a‚ÇÇ))  ‚â°‚ü® right-inverse-of _ ‚ü©‚àé
                  get l a‚ÇÇ                 ‚àé
    }

  -- A blocked variant of l‚Åª¬π.

  l‚Åª¬π‚Ä≤ : Block "l‚Åª¬π" ‚Üí Lens B A
  l‚Åª¬π‚Ä≤ ‚ä† = l‚Åª¬π

  -- The lens l‚Åª¬π is a right inverse of l.

  l‚àòl‚Åª¬π‚â°id : ‚àÄ b ‚Üí l ‚àò l‚Åª¬π‚Ä≤ b ‚â° id
  l‚àòl‚Åª¬π‚â°id ‚ä† = constant-setter‚Üí‚â°id
    ( right-inverse-of
    , right-inverse-of
    , (Œª b‚ÇÅ b‚ÇÇ ‚Üí
         get-set (l ‚àò l‚Åª¬π) b‚ÇÅ b‚ÇÇ                                 ‚â°‚ü®‚ü©

         trans (cong (get l) (get-set l‚Åª¬π b‚ÇÅ (from b‚ÇÇ)))
           (get-set l (from b‚ÇÅ) b‚ÇÇ)                              ‚â°‚ü®‚ü©

         trans (cong (get l) (left-inverse-of (from b‚ÇÇ)))
           (right-inverse-of b‚ÇÇ)                                 ‚â°‚ü® cong (Œª eq ‚Üí trans (cong (get l) eq) (right-inverse-of b‚ÇÇ)) $ sym $
                                                                    right-left-lemma _ ‚ü©
         trans (cong (get l) (cong from (right-inverse-of b‚ÇÇ)))
           (right-inverse-of b‚ÇÇ)                                 ‚â°‚ü® cong (Œª eq ‚Üí trans eq (right-inverse-of b‚ÇÇ)) $
                                                                    cong-‚àò _ _ (right-inverse-of b‚ÇÇ) ‚ü©
         trans (cong (get l ‚äö from) (right-inverse-of b‚ÇÇ))
           (right-inverse-of b‚ÇÇ)                                 ‚â°‚ü®‚ü©

         trans (cong (get (l ‚àò l‚Åª¬π)) (right-inverse-of b‚ÇÇ))
           (right-inverse-of b‚ÇÇ)                                 ‚àé)
    , (Œª b ‚Üí
         set-get (l ‚àò l‚Åª¬π) b                                 ‚â°‚ü®‚ü©

         trans (cong (get l) (set-get l (from b)))
           (set-get l‚Åª¬π b)                                   ‚â°‚ü®‚ü©

         trans (cong (get l) (set-get l (from b)))
           (trans (sym (cong (get l) (set-get l (from b))))
              (trans (right-inverse-of (get l (from b)))
                 (right-inverse-of b)))                      ‚â°‚ü® trans--[trans-sym] _ _ ‚ü©

         trans (right-inverse-of (get l (from b)))
           (right-inverse-of b)                              ‚â°‚ü®‚ü©

         trans (right-inverse-of (get (l ‚àò l‚Åª¬π) b))
           (right-inverse-of b)                              ‚àé)
    , (Œª b b‚ÇÅ b‚ÇÇ ‚Üí
         set-set (l ‚àò l‚Åª¬π) b b‚ÇÅ b‚ÇÇ                                      ‚â°‚ü®‚ü©

         trans (set-set l‚Åª¬π b (from b‚ÇÅ) (from b‚ÇÇ))
           (trans (cong (Œª _ ‚Üí get l (from b‚ÇÇ))
                     (get-set l‚Åª¬π b (from b‚ÇÅ)))
              (cong (get l) (set-set l (from b) b‚ÇÅ b‚ÇÇ)))                ‚â°‚ü® cong (trans _) $
                                                                           trans (cong (flip trans _) $ cong-const _) $
                                                                           trans-reflÀ° _ ‚ü©
         trans (set-set l‚Åª¬π b (from b‚ÇÅ) (from b‚ÇÇ))
           (cong (get l) (set-set l (from b) b‚ÇÅ b‚ÇÇ))                    ‚â°‚ü®‚ü©

         trans (trans (sym (right-inverse-of _))
                  (trans (sym (cong (get l)
                                 (set-set l (from b) (get l (from b‚ÇÅ))
                                    (get l (from b‚ÇÇ)))))
                     (right-inverse-of _)))
           (cong (get l) (set-set l (from b) b‚ÇÅ b‚ÇÇ))                    ‚â°‚ü® cong (Œª b‚Ä≤ ‚Üí trans (trans (sym (right-inverse-of _))
                                                                                                 (trans (sym (cong (get l)
                                                                                                                (set-set l (from b) b‚Ä≤
                                                                                                                   (get l (from b‚ÇÇ)))))
                                                                                                    (right-inverse-of _)))
                                                                                          (cong (get l) (set-set l (from b) b‚ÇÅ b‚ÇÇ))) $
                                                                           right-inverse-of _ ‚ü©
         trans (trans (sym (right-inverse-of _))
                  (trans (sym (cong (get l)
                                 (set-set l (from b) b‚ÇÅ
                                    (get l (from b‚ÇÇ)))))
                     (right-inverse-of _)))
           (cong (get l) (set-set l (from b) b‚ÇÅ b‚ÇÇ))                    ‚â°‚ü® cong (Œª f ‚Üí trans (trans (sym (f _))
                                                                                                (trans (sym (cong (get l)
                                                                                                               (set-set l (from b) b‚ÇÅ
                                                                                                                  (get l (from b‚ÇÇ)))))
                                                                                                   (f _)))
                                                                                         (cong (get l) (set-set l (from b) b‚ÇÅ b‚ÇÇ))) $ sym $
                                                                           _‚âÉ_.left-inverse-of (Eq.extensionality-isomorphism bad-ext)
                                                                             right-inverse-of ‚ü©
         trans (trans (sym (ext‚Åª¬π (‚ü®ext‚ü© right-inverse-of) _))
                  (trans (sym (cong (get l)
                                 (set-set l (from b) b‚ÇÅ
                                    (get l (from b‚ÇÇ)))))
                     (ext‚Åª¬π (‚ü®ext‚ü© right-inverse-of) _)))
           (cong (get l) (set-set l (from b) b‚ÇÅ b‚ÇÇ))                    ‚â°‚ü® elim‚ÇÅ
                                                                             (Œª {f} (p : f ‚â° P.id) ‚Üí
                                                                                (q : ‚àÄ b ‚Üí f b ‚â° f b) ‚Üí
                                                                                trans (trans (sym (ext‚Åª¬π p (f b‚ÇÇ)))
                                                                                         (trans (sym (q (f b‚ÇÇ))) (ext‚Åª¬π p (f b‚ÇÇ))))
                                                                                  (q b‚ÇÇ) ‚â°
                                                                                refl _)
                                                                             (Œª q ‚Üí
             trans (trans (sym (ext‚Åª¬π (refl P.id) _))
                      (trans (sym (q _)) (ext‚Åª¬π (refl P.id) _)))
               (q _)                                                            ‚â°‚ü® cong (Œª eq ‚Üí trans (trans (sym eq) (trans (sym (q _)) eq))
                                                                                                  (q _)) $
                                                                                   ext‚Åª¬π-refl _ ‚ü©
             trans (trans (sym (refl _))
                      (trans (sym (q _)) (refl _)))
               (q _)                                                            ‚â°‚ü® cong‚ÇÇ (Œª p r ‚Üí trans (trans p r) (q _))
                                                                                     sym-refl
                                                                                     (trans-refl ≥ _) ‚ü©

             trans (trans (refl _) (sym (q _))) (q _)                           ‚â°‚ü® cong (Œª eq ‚Üí trans eq (q _)) $ trans-reflÀ° (sym (q _)) ‚ü©

             trans (sym (q _)) (q _)                                            ‚â°‚ü® trans-symÀ° (q _) ‚ü©‚àé

             refl _                                                             ‚àé)
                                                                             (‚ü®ext‚ü© right-inverse-of)
                                                                             (cong (get l) ‚äö set-set l (from b) b‚ÇÅ) ‚ü©
         refl _                                                         ‚àé)
    )

  -- The lens l‚Åª¬π is a left inverse of l.

  l‚Åª¬π‚àòl‚â°id : ‚àÄ b ‚Üí l‚Åª¬π‚Ä≤ b ‚àò l ‚â° id
  l‚Åª¬π‚àòl‚â°id ‚ä† = constant-setter‚Üí‚â°id
    ( left-inverse-of
    , left-inverse-of
    , (Œª a‚ÇÅ a‚ÇÇ ‚Üí
         get-set (l‚Åª¬π ‚àò l) a‚ÇÅ a‚ÇÇ                                ‚â°‚ü®‚ü©

         trans (cong from (get-set l a‚ÇÅ (to a‚ÇÇ)))
           (get-set l‚Åª¬π (get l a‚ÇÅ) a‚ÇÇ)                          ‚â°‚ü®‚ü©

         trans (cong from (right-inverse-of (to a‚ÇÇ)))
           (left-inverse-of a‚ÇÇ)                                 ‚â°‚ü® cong (Œª eq ‚Üí trans (cong from eq) (left-inverse-of _)) $ sym $
                                                                   left-right-lemma _ ‚ü©
         trans (cong from (cong (get l) (left-inverse-of a‚ÇÇ)))
           (left-inverse-of a‚ÇÇ)                                 ‚â°‚ü® cong (Œª eq ‚Üí trans eq (left-inverse-of _)) $
                                                                   cong-‚àò _ _ (left-inverse-of _) ‚ü©
         trans (cong (from ‚äö get l) (left-inverse-of a‚ÇÇ))
           (left-inverse-of a‚ÇÇ)                                 ‚â°‚ü®‚ü©

         trans (cong (get (l‚Åª¬π ‚àò l)) (left-inverse-of a‚ÇÇ))
           (left-inverse-of a‚ÇÇ)                                 ‚àé)
    , (Œª a ‚Üí
         let lemma‚ÇÅ =
               cong from
                 (trans (sym (cong (get l)
                                (set-get l (from (get l a)))))
                    (trans (right-inverse-of _)
                       (right-inverse-of _)))                            ‚â°‚ü® cong-trans _ _ (trans _ (right-inverse-of _)) ‚ü©

               trans (cong from (sym (cong (get l)
                                        (set-get l (from (get l a))))))
                 (cong from (trans (right-inverse-of _)
                               (right-inverse-of _)))                    ‚â°‚ü® cong (Œª eq ‚Üí trans (cong from eq)
                                                                                           (cong from (trans (right-inverse-of _)
                                                                                                         (right-inverse-of _)))) $ sym $
                                                                            cong-sym _ (set-get l (from (get l a))) ‚ü©
               trans (cong from (cong (get l)
                                   (sym (set-get l (from (get l a))))))
                 (cong from (trans (right-inverse-of _)
                               (right-inverse-of _)))                    ‚â°‚ü® cong‚ÇÇ trans
                                                                              (cong-‚àò _ _ (sym (set-get l (from (get l a)))))
                                                                              (cong-trans _ _ (right-inverse-of _)) ‚ü©
               trans (cong (from ‚äö get l)
                        (sym (set-get l (from (get l a)))))
                 (trans (cong from (right-inverse-of _))
                    (cong from (right-inverse-of _)))                    ‚â°‚ü® cong‚ÇÇ (Œª p q ‚Üí trans (cong (from ‚äö get l)
                                                                                                    (sym (set-get l (from (get l a)))))
                                                                                             (trans p q))
                                                                              (right-left-lemma _)
                                                                              (right-left-lemma _) ‚ü©‚àé
               trans (cong (from ‚äö get l)
                        (sym (set-get l (from (get l a)))))
                 (trans (left-inverse-of _)
                    (left-inverse-of _))                                 ‚àé

             f = from ‚äö get l

             lemma‚ÇÇ : ‚àÄ _ ‚Üí _
             lemma‚ÇÇ = Œª a ‚Üí
               trans (left-inverse-of (f a))
                 (left-inverse-of a)                        ‚â°‚ü® cong (Œª g ‚Üí trans (g (f a)) (g a)) $ sym $
                                                               _‚âÉ_.left-inverse-of (Eq.extensionality-isomorphism bad-ext)
                                                                 left-inverse-of ‚ü©‚àé
               trans (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) (f a))
                 (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) a)          ‚àé

             lemma‚ÇÉ =
               trans (ext‚Åª¬π (refl P.id) a) (ext‚Åª¬π (refl P.id) a)  ‚â°‚ü® cong‚ÇÇ trans (ext‚Åª¬π-refl _) (ext‚Åª¬π-refl _) ‚ü©
               trans (refl _) (refl _)                            ‚â°‚ü® trans-refl-refl ‚ü©‚àé
               refl _                                             ‚àé
         in
         trans (cong from (set-get l‚Åª¬π (get l a)))
           (set-get l a)                                            ‚â°‚ü®‚ü©

         trans (cong from
                  (trans (sym (cong (get l)
                                 (set-get l (from (get l a)))))
                     (trans (right-inverse-of _)
                        (right-inverse-of _))))
           (set-get l a)                                            ‚â°‚ü® cong (Œª eq ‚Üí trans eq (set-get l a)) lemma‚ÇÅ ‚ü©

         trans (trans (cong f (sym (set-get l (f a))))
                  (trans (left-inverse-of (f (f a)))
                     (left-inverse-of (f a))))
           (set-get l a)                                            ‚â°‚ü® cong (Œª eq ‚Üí trans (trans (cong f (sym (set-get l (f a)))) eq)
                                                                                      (set-get l a)) $
                                                                       lemma‚ÇÇ _ ‚ü©
         trans (trans (cong f (sym (set-get l (f a))))
                  (trans (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) (f (f a)))
                     (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) (f a))))
           (set-get l a)                                            ‚â°‚ü® elim‚ÇÅ
                                                                         (Œª {f} (p : f ‚â° P.id) ‚Üí
                                                                            (q : ‚àÄ a ‚Üí f a ‚â° a) ‚Üí
                                                                            trans (trans (cong f (sym (q (f a))))
                                                                                     (trans (ext‚Åª¬π p (f (f a))) (ext‚Åª¬π p (f a))))
                                                                              (q a) ‚â°
                                                                            trans (ext‚Åª¬π p (f a)) (ext‚Åª¬π p a))
                                                                         (Œª q ‚Üí
             trans (trans (cong P.id (sym (q a)))
                      (trans (ext‚Åª¬π (refl P.id) a)
                         (ext‚Åª¬π (refl P.id) a)))
               (q a)                                                        ‚â°‚ü® cong‚ÇÇ (Œª p r ‚Üí trans (trans p r) (q a))
                                                                                 (sym $ cong-id _)
                                                                                 lemma‚ÇÉ ‚ü©

             trans (trans (sym (q a)) (refl _)) (q a)                       ‚â°‚ü® cong (flip trans _) $ trans-refl ≥ _ ‚ü©

             trans (sym (q a)) (q a)                                        ‚â°‚ü® trans-symÀ° (q a) ‚ü©

             refl _                                                         ‚â°‚ü® sym lemma‚ÇÉ ‚ü©‚àé

             trans (ext‚Åª¬π (refl P.id) a) (ext‚Åª¬π (refl P.id) a)              ‚àé)
                                                                         (‚ü®ext‚ü© left-inverse-of)
                                                                         (set-get l) ‚ü©
         trans (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) (f a))
           (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) a)                        ‚â°‚ü® sym $ lemma‚ÇÇ _ ‚ü©

         trans (left-inverse-of (f a))
           (left-inverse-of a)                                      ‚â°‚ü®‚ü©

         trans (left-inverse-of (get (l‚Åª¬π ‚àò l) a))
           (left-inverse-of a)                                      ‚àé)
    , (Œª a a‚ÇÅ a‚ÇÇ ‚Üí
         let q = set-set l a (get l a‚ÇÅ) (get l a‚ÇÇ)

             lemma =
               cong from
                 (trans (sym (right-inverse-of _))
                    (trans (sym (cong (get l) q))
                       (right-inverse-of _)))                    ‚â°‚ü® cong-trans _ _ (trans (sym (cong (get l) q)) (right-inverse-of _)) ‚ü©

               trans (cong from (sym (right-inverse-of _)))
                 (cong from (trans (sym (cong (get l) q))
                               (right-inverse-of _)))            ‚â°‚ü® cong‚ÇÇ trans
                                                                      (cong-sym _ (right-inverse-of _))
                                                                      (cong-trans _ _ (right-inverse-of _)) ‚ü©
               trans (sym (cong from (right-inverse-of _)))
                 (trans (cong from (sym (cong (get l) q)))
                    (cong from (right-inverse-of _)))            ‚â°‚ü® cong‚ÇÇ (Œª p r ‚Üí trans (sym p) (trans (cong from (sym (cong (get l) q))) r))
                                                                      (right-left-lemma _)
                                                                      (right-left-lemma _) ‚ü©
               trans (sym (left-inverse-of _))
                 (trans (cong from (sym (cong (get l) q)))
                    (left-inverse-of _))                         ‚â°‚ü® cong (Œª eq ‚Üí trans (sym (left-inverse-of _))
                                                                                   (trans eq (left-inverse-of _))) $
                                                                    cong-sym _ (cong (get l) q) ‚ü©
               trans (sym (left-inverse-of _))
                 (trans (sym (cong from (cong (get l) q)))
                    (left-inverse-of _))                         ‚â°‚ü® cong (Œª eq ‚Üí trans (sym (left-inverse-of _))
                                                                                   (trans (sym eq) (left-inverse-of _))) $
                                                                    cong-‚àò _ _ q ‚ü©
               trans (sym (left-inverse-of _))
                 (trans (sym (cong (from ‚äö get l) q))
                    (left-inverse-of _))                         ‚â°‚ü® cong (Œª g ‚Üí trans (sym (g _))
                                                                                  (trans (sym (cong (from ‚äö get l) q)) (g _))) $ sym $
                                                                    _‚âÉ_.left-inverse-of (Eq.extensionality-isomorphism bad-ext)
                                                                      left-inverse-of ‚ü©‚àé
               trans (sym (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) _))
                 (trans (sym (cong (from ‚äö get l) q))
                    (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) _))           ‚àé

             f = from ‚äö get l
         in
         set-set (l‚Åª¬π ‚àò l) a a‚ÇÅ a‚ÇÇ                                     ‚â°‚ü®‚ü©

         trans (set-set l a (get l a‚ÇÅ) (get l a‚ÇÇ))
           (trans (cong (Œª _ ‚Üí from (get l a‚ÇÇ))
                     (right-inverse-of (get l a‚ÇÅ)))
              (cong from (set-set l‚Åª¬π (get l a) a‚ÇÅ a‚ÇÇ)))               ‚â°‚ü® cong (trans _) $
                                                                          trans (cong (flip trans _) $ cong-const _) $
                                                                          trans-reflÀ° _ ‚ü©
         trans (set-set l a (get l a‚ÇÅ) (get l a‚ÇÇ))
           (cong from (set-set l‚Åª¬π (get l a) a‚ÇÅ a‚ÇÇ))                   ‚â°‚ü®‚ü©

         trans (set-set l a (get l a‚ÇÅ) (get l a‚ÇÇ))
           (cong from
              (trans (sym (right-inverse-of _))
                 (trans (sym (cong (get l)
                                (set-set l (from (get l a))
                                   (get l a‚ÇÅ) (get l a‚ÇÇ))))
                    (right-inverse-of _))))                            ‚â°‚ü® cong (Œª a‚Ä≤ ‚Üí trans q
                                                                                         (cong from
                                                                                            (trans (sym (right-inverse-of _))
                                                                                               (trans (sym (cong (get l)
                                                                                                              (set-set l a‚Ä≤ (get l a‚ÇÅ) (get l a‚ÇÇ))))
                                                                                                  (right-inverse-of _))))) $
                                                                          left-inverse-of _ ‚ü©
         trans q
           (cong from
              (trans (sym (right-inverse-of _))
                 (trans (sym (cong (get l) q))
                    (right-inverse-of _))))                            ‚â°‚ü® cong (trans q) lemma ‚ü©

         trans q
           (trans (sym (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) (f a‚ÇÇ)))
              (trans (sym (cong f q))
                 (ext‚Åª¬π (‚ü®ext‚ü© left-inverse-of) (f a‚ÇÇ))))              ‚â°‚ü® elim‚ÇÅ
                                                                            (Œª {f} (p : f ‚â° P.id) ‚Üí
                                                                               (q : f a‚ÇÇ ‚â° f a‚ÇÇ) ‚Üí
                                                                               trans q
                                                                                 (trans (sym (ext‚Åª¬π p (f a‚ÇÇ)))
                                                                                    (trans (sym (cong f q))
                                                                                       (ext‚Åª¬π p (f a‚ÇÇ)))) ‚â°
                                                                               refl _)
                                                                          (Œª q ‚Üí
             trans q
               (trans (sym (ext‚Åª¬π (refl P.id) a‚ÇÇ))
                  (trans (sym (cong P.id q))
                     (ext‚Åª¬π (refl P.id) a‚ÇÇ)))                                ‚â°‚ü® cong (Œª eq ‚Üí trans q (trans (sym eq)
                                                                                                        (trans (sym (cong P.id q)) eq))) $
                                                                                ext‚Åª¬π-refl _ ‚ü©
             trans q (trans (sym (refl _))
                        (trans (sym (cong P.id q)) (refl _)))                ‚â°‚ü® cong‚ÇÇ (Œª p r ‚Üí trans q (trans p r))
                                                                                  sym-refl
                                                                                  (trans-refl ≥ _) ‚ü©

             trans q (trans (refl _) (sym (cong P.id q)))                    ‚â°‚ü® cong (trans q) $ trans-reflÀ° (sym (cong P.id q)) ‚ü©

             trans q (sym (cong P.id q))                                     ‚â°‚ü® cong (Œª eq ‚Üí trans q (sym eq)) $ sym $ cong-id q ‚ü©

             trans q (sym q)                                                 ‚â°‚ü® trans-sym ≥ q ‚ü©‚àé

             refl _                                                          ‚àé)
                                                                          (‚ü®ext‚ü© left-inverse-of)
                                                                          q ‚ü©

         refl _                                                        ‚àé)
    )

-- There is an equivalence between "l is bi-invertible" and "the
-- getter of l is an equivalence".

Is-bi-invertible‚âÉIs-equivalence-get :
  (l : Lens A B) ‚Üí
  Is-bi-invertible l ‚âÉ Is-equivalence (Lens.get l)
Is-bi-invertible‚âÉIs-equivalence-get l = Eq.‚áî‚Üí‚âÉ
  (BM.Is-bi-invertible-propositional l)
  (Eq.propositional ext _)
  (Is-bi-invertible‚ÜíIs-equivalence-get l)
  (Is-equivalence-get‚ÜíIs-bi-invertible l)

-- There is in general no split surjection from equivalences to
-- bi-invertible lenses, if the right-to-left direction of the split
-- surjection is required to map bi-invertible lenses to their getter
-- functions (assuming univalence).

¬¨‚âÉ‚Ü†‚âä :
  Univalence lzero ‚Üí
  ¬¨ ‚àÉ Œª (‚âÉ‚Ü†‚âä : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚Ü† (‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π)) ‚Üí
      (x@(l , _) : ‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π) ‚Üí
      _‚âÉ_.to (_‚Ü†_.from ‚âÉ‚Ü†‚âä x) ‚â° Lens.get l
¬¨‚âÉ‚Ü†‚âä {a = a} univ =
  (‚àÉ Œª (f : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚Ü† (‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π)) ‚Üí
     ‚àÄ p ‚Üí _‚âÉ_.to (_‚Ü†_.from f p) ‚â° Lens.get (proj‚ÇÅ p))  ‚Üù‚ü® Œ£-map
                                                             ((‚àÉ-cong Œª l ‚Üí _‚âÉ_.surjection $ Is-bi-invertible‚âÉIs-equivalence-get l) F.‚àò_)
                                                             (Œª hyp _ ‚Üí hyp _) ‚ü©
  (‚àÉ Œª (f : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚Ü†
            (‚àÉ Œª (l : Lens (‚Üë a ùïä¬π) (‚Üë a ùïä¬π)) ‚Üí
               Is-equivalence (Lens.get l))) ‚Üí
     ‚àÄ p ‚Üí _‚âÉ_.to (_‚Ü†_.from f p) ‚â° Lens.get (proj‚ÇÅ p))  ‚Üù‚ü® ¬¨-‚âÉ-‚Ü†-Œ£-Lens-Is-equivalence-get univ ‚ü©‚ñ°

  ‚ä•                                                     ‚ñ°

-- There is in general no equivalence between equivalences and
-- bi-invertible lenses, if the right-to-left direction of the
-- equivalence is required to map bi-invertible lenses to their getter
-- functions (assuming univalence).

¬¨‚âÉ‚âÉ‚âä :
  Univalence lzero ‚Üí
  ¬¨ ‚àÉ Œª (‚âÉ‚âÉ‚âä : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚âÉ (‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π)) ‚Üí
      (x@(l , _) : ‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π) ‚Üí
      _‚âÉ_.to (_‚âÉ_.from ‚âÉ‚âÉ‚âä x) ‚â° Lens.get l
¬¨‚âÉ‚âÉ‚âä {a = a} univ =
  (‚àÉ Œª (‚âÉ‚âÉ‚âä : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚âÉ (‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π)) ‚Üí
     (x@(l , _) : ‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π) ‚Üí
     _‚âÉ_.to (_‚âÉ_.from ‚âÉ‚âÉ‚âä x) ‚â° Lens.get l)              ‚Üù‚ü® Œ£-map _‚âÉ_.surjection P.id ‚ü©

  (‚àÉ Œª (‚âÉ‚Ü†‚âä : (‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚Ü† (‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π)) ‚Üí
     (x@(l , _) : ‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π) ‚Üí
     _‚âÉ_.to (_‚Ü†_.from ‚âÉ‚Ü†‚âä x) ‚â° Lens.get l)              ‚Üù‚ü® ¬¨‚âÉ‚Ü†‚âä univ ‚ü©‚ñ°

  ‚ä•                                                     ‚ñ°

------------------------------------------------------------------------
-- A category

-- Lenses between sets with the same universe level form a
-- precategory.

precategory : Precategory (lsuc a) a
precategory {a = a} = record
  { precategory =
      Set a
    , (Œª (A , A-set) (B , _) ‚Üí
           Lens A B
         , lens-preserves-h-level-of-domain 1 A-set)
    , id
    , _‚àò_
    , left-identity _
    , right-identity _
    , (Œª {_ _ _ _ l‚ÇÅ l‚ÇÇ l‚ÇÉ} ‚Üí associativity l‚ÇÉ l‚ÇÇ l‚ÇÅ)
  }

-- Lenses between sets with the same universe level form a
-- category (assuming univalence).

category :
  Univalence a ‚Üí
  Category (lsuc a) a
category {a = a} univ =
  C.precategory-with-Set-to-category
    ext
    (Œª _ _ ‚Üí univ)
    (proj‚ÇÇ Pre.precategory)
    (Œª (_ , A-set) _ ‚Üí ‚âÉ‚âÉ‚âÖ A-set)
    (Œª (_ , A-set) ‚Üí ‚âÉ‚âÉ‚âÖ-id‚â°id A-set)
  where
  module Pre = C.Precategory precategory

-- The following four results (up to and including ¬¨-univalent) are
-- based on a suggestion by Paolo Capriotti, in response to a question
-- from an anonymous reviewer.

-- A "naive" notion of category.
--
-- Note that the hom-sets are not required to be sets.

Naive-category : (o h : Level) ‚Üí Type (lsuc (o ‚äî h))
Naive-category o h =
  ‚àÉ Œª (Obj : Type o) ‚Üí
  ‚àÉ Œª (Hom : Obj ‚Üí Obj ‚Üí Type h) ‚Üí
  ‚àÉ Œª (id : {A : Obj} ‚Üí Hom A A) ‚Üí
  ‚àÉ Œª (_‚àò_ : {A B C : Obj} ‚Üí Hom B C ‚Üí Hom A B ‚Üí Hom A C) ‚Üí
    ({A B : Obj} (h : Hom A B) ‚Üí id ‚àò h ‚â° h) √ó
    ({A B : Obj} (h : Hom A B) ‚Üí h ‚àò id ‚â° h) √ó
    ({A B C D : Obj} (h‚ÇÅ : Hom C D) (h‚ÇÇ : Hom B C) (h‚ÇÉ : Hom A B) ‚Üí
     (h‚ÇÅ ‚àò (h‚ÇÇ ‚àò h‚ÇÉ)) ‚â° ((h‚ÇÅ ‚àò h‚ÇÇ) ‚àò h‚ÇÉ))

-- A notion of univalence for naive categories.

Univalent : Naive-category o h ‚Üí Type (o ‚äî h)
Univalent (Obj , Hom , id , _‚àò_ , id-‚àò , ‚àò-id , assoc) =
  Bi-invertibility.More.Univalence-‚âä
    equality-with-J Obj Hom id _‚àò_ id-‚àò ‚àò-id assoc

-- Types in a fixed universe and traditional lenses between them form
-- a naive category.

naive-category : ‚àÄ a ‚Üí Naive-category (lsuc a) a
naive-category a =
    Type a
  , Lens
  , id
  , _‚àò_
  , left-identity
  , right-identity
  , associativity

-- However, this category is not univalent (assuming univalence).

¬¨-univalent :
  Univalence lzero ‚Üí
  Univalence a ‚Üí
  ¬¨ Univalent (naive-category a)
¬¨-univalent {a = a} univ‚ÇÄ univ u = ¬¨‚âÉ‚âÉ‚âä univ‚ÇÄ (equiv , lemma‚ÇÇ)
  where
  equiv : {A B : Type a} ‚Üí (A ‚âÉ B) ‚âÉ (A ‚âä B)
  equiv {A = A} {B = B} =
    (A ‚âÉ B)  ‚Üù‚ü® inverse $ ‚â°‚âÉ‚âÉ univ ‚ü©
    (A ‚â° B)  ‚Üù‚ü® Eq.‚ü® _ , u ‚ü© ‚ü©‚ñ°
    (A ‚âä B)  ‚ñ°

  lemma‚ÇÅ :
    (eq : ‚Üë a ùïä¬π ‚âÉ ‚Üë a ùïä¬π) ‚Üí
    _‚âÉ_.to eq ‚â° Lens.get (proj‚ÇÅ (_‚âÉ_.to equiv eq))
  lemma‚ÇÅ =
    ‚âÉ-elim‚ÇÅ
      univ
      (Œª eq ‚Üí _‚âÉ_.to eq ‚â° Lens.get (proj‚ÇÅ (_‚âÉ_.to equiv eq)))
      (P.id                                        ‚â°‚ü® cong (Lens.get ‚äö proj‚ÇÅ) $ sym $ elim-refl _ _ ‚ü©
       Lens.get (proj‚ÇÅ (BM.‚â°‚Üí‚âä (refl _)))          ‚â°‚ü® cong (Lens.get ‚äö proj‚ÇÅ ‚äö BM.‚â°‚Üí‚âä) $ sym $ ‚âÉ‚áí‚â°-id univ ‚ü©
       Lens.get (proj‚ÇÅ (BM.‚â°‚Üí‚âä (‚âÉ‚áí‚â° univ Eq.id)))  ‚â°‚ü®‚ü©
       Lens.get (proj‚ÇÅ (_‚âÉ_.to equiv Eq.id))       ‚àé)

  lemma‚ÇÇ :
    (x@(l , _) : ‚Üë a ùïä¬π ‚âä ‚Üë a ùïä¬π) ‚Üí
    _‚âÉ_.to (_‚âÉ_.from equiv x) ‚â° Lens.get l
  lemma‚ÇÇ x@(l , _) =
    _‚âÉ_.to (_‚âÉ_.from equiv x)                           ‚â°‚ü® lemma‚ÇÅ (_‚âÉ_.from equiv x) ‚ü©
    Lens.get (proj‚ÇÅ (_‚âÉ_.to equiv (_‚âÉ_.from equiv x)))  ‚â°‚ü® cong (Lens.get ‚äö proj‚ÇÅ) $ _‚âÉ_.right-inverse-of equiv _ ‚ü©
    Lens.get (proj‚ÇÅ x)                                  ‚â°‚ü®‚ü©
    Lens.get l                                          ‚àé

-- There is in general no pointwise equivalence between equivalences
-- and bi-invertible lenses (assuming univalence).

¬¨Œ†‚âÉ‚âÉ‚âä :
  Univalence lzero ‚Üí
  Univalence a ‚Üí
  ¬¨ ({A B : Type a} ‚Üí (A ‚âÉ B) ‚âÉ (A ‚âä B))
¬¨Œ†‚âÉ‚âÉ‚âä {a = a} univ‚ÇÄ univ =
  ({A B : Type a} ‚Üí (A ‚âÉ B) ‚âÉ (A ‚âä B))  ‚Üù‚ü® F._‚àò ‚â°‚âÉ‚âÉ univ ‚ü©
  ({A B : Type a} ‚Üí (A ‚â° B) ‚âÉ (A ‚âä B))  ‚Üù‚ü® BM.‚â°‚âÉ‚âä‚ÜíUnivalence-‚âä ‚ü©
  Univalent (naive-category a)          ‚Üù‚ü® ¬¨-univalent univ‚ÇÄ univ ‚ü©‚ñ°
  ‚ä•                                     ‚ñ°

-- There is in general no pointwise equivalence between equivalences
-- (between types in the same universe) and lenses with getters that
-- are equivalences (assuming univalence).

¬¨Œ†‚âÉ-‚âÉ-Œ£-Lens-Is-equivalence-get :
  Univalence lzero ‚Üí
  Univalence a ‚Üí
  ¬¨ ({A B : Type a} ‚Üí
     (A ‚âÉ B) ‚âÉ ‚àÉ Œª (l : Lens A B) ‚Üí Is-equivalence (Lens.get l))
¬¨Œ†‚âÉ-‚âÉ-Œ£-Lens-Is-equivalence-get {a = a} univ‚ÇÄ univ =
  ({A B : Type a} ‚Üí
   (A ‚âÉ B) ‚âÉ ‚àÉ Œª (l : Lens A B) ‚Üí Is-equivalence (Lens.get l))  ‚Üù‚ü® inverse (‚àÉ-cong Is-bi-invertible‚âÉIs-equivalence-get) F.‚àò_ ‚ü©

  ({A B : Type a} ‚Üí (A ‚âÉ B) ‚âÉ (A ‚âä B))                          ‚Üù‚ü® ¬¨Œ†‚âÉ‚âÉ‚âä univ‚ÇÄ univ ‚ü©‚ñ°

  ‚ä•                                                             ‚ñ°
